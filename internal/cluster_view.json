{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 291,
  "links": [
    {
      "asDropdown": true,
      "icon": "external link",
      "includeVars": true,
      "keepTime": true,
      "tags": [],
      "targetBlank": true,
      "title": "Other Dashboards",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    },
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": false,
      "keepTime": false,
      "tags": [],
      "targetBlank": true,
      "title": "Fleet Debugger Tool",
      "tooltip": "",
      "type": "link",
      "url": "https://fleetdebug.azurewebsites.net/chainlit/"
    }
  ],
  "panels": [
    {
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 14,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 83,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "# Access Requirements\n\n### GDCO Database Access\nFor access to the GDCO Database, please visit: [Accessing Data Galaxy](https://microsoft.sharepoint.com/sites/DataGalaxy/SitePages/Accessing-Data-Galaxy.aspx?xsdata=MDV8MDJ8fGQxMzdiODhjZWI2ODQ3MTY0ZTA4MDhkZGNlYzAxNWQ1fDcyZjk4OGJmODZmMTQxYWY5MWFiMmQ3Y2QwMTFkYjQ3fDB8MHw2Mzg4OTQwNDY1NTE4MjY5MzN8VW5rbm93bnxWR1ZoYlhOVFpXTjFjbWwwZVZObGNuWnBZMlY4ZXlKRFFTSTZJbFJsWVcxelgwRlVVRk5sY25acFkyVmZVMUJQVEU5R0lpd2lWaUk2SWpBdU1DNHdNREF3SWl3aVVDSTZJbGRwYmpNeUlpd2lRVTRpT2lKUGRHaGxjaUlzSWxkVUlqb3hNWDA9fDF8TDJOb1lYUnpMekU1T20xbFpYUnBibWRmV1hwVk1FOVVhelJQVkZGMFdUSmFiRTlETURCT1IxWnRURlJzYVUxcVdYUmFSR016VGxSSk0wNUVVVEJOVkZVeVFIUm9jbVZoWkM1Mk1pOXRaWE56WVdkbGN5OHhOelV6T0RBM09EVTBNemd4fGIyOGRiNGIxYzhiMjRmYzNmMmUzMDhkZGNlYzAxNWQ0fGQxY2ZhN2JlN2NjNDQxZGY5YWZmZjM0NGM5YmM5NDli&sdata=MEVCSFRZeEFjQzN5cVc1OXdaSS9DQjkwQ0dramdIbWttN1V3ZXJGTHJEYz0%3D&ovuser=72f988bf-86f1-41af-91ab-2d7cd011db47%2Cdakpan%40microsoft.com&OR=Teams-HL&CT=1753907875013&clickparams=eyJBcHBOYW1lIjoiVGVhbXMtRGVza3RvcCIsIkFwcFZlcnNpb24iOiI0OS8yNTA3MDMxODgwNiIsIkhhc0ZlZGVyYXRlZFVzZXIiOmZhbHNlfQ%3D%3D&SafelinksUrl=https%3A%2F%2Fmicrosoft.sharepoint.com%2Fsites%2FDataGalaxy%2FSitePages%2FAccessing-Data-Galaxy.aspx#requesting-access-to-common-datasets)\n\n### Security Group Access\nPlease join the **SG - HPC Fleet Owners** Security Group for access if any errors are seen in the panels.\n\n# Azure DCM, TM, and Hardware State Management Guide\n\n## Overview\n\nIn a nutshell, **DCM (Datacenter Manager)** is responsible for driving a new hardware resource (blade or device) to **Production** in Azure. Once in Production, it will be picked up by the **CM (Container Manager)** team, to prepare the resource to be **Ready** for customer VMs. \n\n> **Note:** CM is also known as **TM (Tenant Manager)**.\n\n## Dual State Machine Architecture\n\nThere are **two separate state machines** existing at the same time for all hardware in Azure: one for DCM and one for CM/TM. This means that every resource has **two states at any given time**. \n\n**Example:** A device can be in _Production_ in DCM and in _Raw_ in CM simultaneously.\n\n<img src=\"https://msazure.visualstudio.com/b32aa71e-8ed2-41b2-9d77-5bc261222004/_apis/git/repositories/4482edfe-a7ee-4522-9ec5-48442a1579d5/Items?path=/.attachments/DCM-Cycle-54f51fed-716e-4c92-ad3b-6cb35678f304.gif&download=false&resolveLfs=true&%24format=octetStream&api-version=5.0-preview.1&sanitize=true&versionDescriptor.version=wikiMaster\">\n\n---\n\n## Tenant Manager (TM/CM) States\n\n### TM Availability States\n**Definition:** Whether or not the node can accept a VM\n\n| State | Description |\n|-------|-------------|\n| **Available** | Can take a new VM |\n| **Unallocatable (UA)** | Don't allow new VMs, existing ones can stay. Generally something is wrong, and we want the node back |\n| **Faulted** | Something is unexpectedly wrong here. Auto-recovery attempted |\n| **OutForRepair (OFR)** | Node is unhealthy and unavailable; it has been passed to DCM |\n\n### TM Node States\n**Definition:** Whether or not the node is healthy and running\n\n| State | Description |\n|-------|-------------|\n| **Ready** | Happy & Healthy, the goal state |\n| **HumanInvestigate (HI)** | Called HumanInvestigate but rarely do humans investigate in this state. Often transitionary in which Fabric will attempt auto-recovery or the nodes end up OFR. **HI/Faulted is a very common tuple** |\n| **OutForRepair (OFR)** | Node is unhealthy and unavailable, it has been passed to DCM |\n\n---\n\n## DCM Lifecycle States\n\n### Major DCM States\n\n| State | Description |\n|-------|-------------|\n| **Production** | The node has been passed back to TM, **the goal state** |\n| **Diagnostics** | We are running automated diagnostics to find hardware faults |\n| **OutForRepair** | A node has a FaultCode as the result of a DCM activity. Most commonly from diagnostics and typically results in a repair ticket (GDCO Ticket) |\n| **Configuration** | Node is coming back from OFR, basic checks like wires are plugged in and MAC discovery to establish networking |\n| **Certification** | Diagnostics Round 2, make sure that the repair actually fixed the problem. Catch any other problems that might arise |\n| **Preparation** | Establish basically everything that is needed to pass back to Tenant Manager. Firmware, bitlocker, etc. |\n| **Unavailable** | The resource is unavailable, typically because an associated resource is not in production. Such as a Blade and its SoC |\n\n### Other DCM States\n\n| State | Description |\n|-------|-------------|\n| **Triage** | Holding state, manual investigations |\n\n---\n\n## Detailed DCM State Workflow\n\n### Configuration (Config)\n- Wire checking (power, network and serial wires)\n- Discovering/setting the MAC address\n\n### Certification (Cert)\n- Functional checks\n- Performance requirements\n\n### Preparation (Prep)\nHere, whatever is needed to make the resource Production-ready is done:\n- **MOS (Maintenance OS, aka WinPE)** preparation\n- **Firmware** preparation\n- **BitLocker** preparation\n- And much more...\n\n**Failure Handling:**\n- Retry 3 times (by moving to **Preparation Suspect** state)\n- If still fails after retries: move to **Diagnostics**\n\n### Production (Prod)\n- Ready for consumption by CM\n- TM calls into DCM every 15 seconds: \"give me the updated inventory\"\n\n### Diagnostics\nWhen a resource is marked as unhealthy in CM (HumanInvestigate), it is sent to **Diagnostics** in DCM to figure out what the problem is.\n- Burden here to find out why there is a problem\n- Hardware fault codes are created to send the resource to OFR\n\n### Out for Repair (OFR)\nHardware fault code is set on the resource for some repair to be done. The list of possible fault codes can be found in the [FaultDescriptions.xml](https://msazure.visualstudio.com/One/_git/Azure-Compute-Move?path=%2Fsrc%2FServices%2FHardware%2FRMA%2Fconfig%2FResources%2FFaultDescriptions.xml&version=GBmaster) file of the Azure-Compute-Move repository.\n\n---\n\n## Key Blade and SoC Relationship Learnings\n\n### Critical State Transitions\n\n1. **When host blade is returned by TM back to DCM** by calling `ReturnResource API`:\n   - Host blade transitions from **Production** → **Diagnostics** state in DCM\n   - **SoC remains in Production state**\n\n2. **Host blade offline state transitions:**\n   - Host blade can transition through other offline states such as **Configuration**, **Certification**, and **Preparation**\n   - **SoC will still remain in Production state**\n   - **Exception:** When host blade moves to **OFR** state\n\n3. **OFR State Exception:**\n   - When host blade transitions to **OFR** state in DCM\n   - **SoC transitions to Unavailable state**\n\n### State Synchronization Rules\n\n| Host Blade DCM State | SoC DCM State | Notes |\n|---------------------|---------------|-------|\n| Production → Diagnostics | Production | SoC stays in Production |\n| Configuration | Production | SoC stays in Production |\n| Certification | Production | SoC stays in Production |\n| Preparation | Production | SoC stays in Production |\n| **OutForRepair (OFR)** | **Unavailable** | **Exception: SoC changes state** |\n\n---\n## OOS Breakdown\n<img src=\"https://dev.azure.com/AzureHPC/bf85ee8b-05da-4f1b-a4c8-19399f246acd/_apis/git/repositories/157ee383-6f13-49d0-af38-0e19a369d125/Items?path=/.attachments/Screenshot%202025-07-26%20at%208.50.57%E2%80%AFPM-30e335c9-415e-4c78-a63c-b6b9f9a37c68.png&download=false&resolveLfs=true&%24format=octetStream&api-version=5.0-preview.1&sanitize=true&versionDescriptor.version=wikiMaster\">",
        "mode": "markdown"
      },
      "pluginVersion": "11.6.3",
      "title": "README",
      "type": "text"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "id": 56,
      "panels": [],
      "title": "High Level Summary",
      "type": "row"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 15
      },
      "id": 37,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where NodeCategory == \"Compute\" \r\n    and IsUtilityNode == false\r\n    and CloudName == \"Public\"\r\n| where $__timeFilter(SnapshotTime)\r\n| where Region in~ ($region)\r\n| where Platform in~ ($platform)\r\n| where Customer in~ ($customer)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| summarize \r\n    TotalNodes = dcount(NodeId),\r\n    TotalClusters = dcount(Tenant),\r\n    NodesinService = dcountif(NodeId,IsNodeInService == true),\r\n    AllocatedNodes = dcountif(NodeId,IsNodeInService == true and IsCustomer == true),\r\n    HEN = dcountif(NodeId,IsNodeInService == true and IsHEN)\r\n    //CustomerNodes = dcountif(NodeId,IsNodeInService == true and IsCustomer== true)\r\n\r\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Fleet Summary",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "AllocatedNodes": 3,
              "NodesinService": 2,
              "TotalClusters": 0,
              "TotalNodes": 1
            },
            "renameByName": {
              "AllocatedNodes": "Customer VMs",
              "NodesinService": "Nodes In Service",
              "TotalClusters": "Total Number of Clusters",
              "TotalNodes": "Total Number Of Nodes"
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "green",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 36,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// Use fixed reference time like your inspiration query\r\nlet reference_time = now();\r\nlet last_month = reference_time - 30d;\r\nlet last_week = reference_time - 7d;\r\nlet last_day = reference_time - 1d;\r\n\r\nlet base_filter = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where NodeCategory == \"Compute\" and IsUtilityNode == false and CloudName == \"Public\"\r\n| where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n| where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster);\r\n\r\n// Current data (using TimeWindowEnd like your inspiration)\r\nlet current_data = base_filter\r\n| where TimeWindowEnd between (reference_time - 4h .. reference_time)\r\n| summarize arg_max(TimeWindowEnd, *) by NodeId\r\n| summarize Total = count(), NISCount = countif(IsNodeInService)\r\n| extend NIS_Percent = iff(Total > 0, round(NISCount / todouble(Total) * 100, 2), 0.0);\r\n\r\n// Yesterday data (same pattern as inspiration)\r\nlet yesterday_data = base_filter\r\n| where TimeWindowEnd between (bin(last_day, 1d) .. bin(last_day, 1d) + 1d)\r\n| summarize arg_max(TimeWindowEnd, *) by NodeId\r\n| summarize Total = count(), NISCount = countif(IsNodeInService)\r\n| extend NIS_Percent = iff(Total > 0, round(NISCount / todouble(Total) * 100, 2), 0.0);\r\n\r\n// Last week data\r\nlet last_week_data = base_filter\r\n| where TimeWindowEnd between (bin(last_week, 1d) .. bin(last_week, 1d) + 1d)\r\n| summarize arg_max(TimeWindowEnd, *) by NodeId\r\n| summarize Total = count(), NISCount = countif(IsNodeInService)\r\n| extend NIS_Percent = iff(Total > 0, round(NISCount / todouble(Total) * 100, 2), 0.0);\r\n\r\n// Last month data\r\nlet last_month_data = base_filter\r\n| where TimeWindowEnd between (bin(last_month, 1d) .. bin(last_month, 1d) + 1d)\r\n| summarize arg_max(TimeWindowEnd, *) by NodeId\r\n| summarize Total = count(), NISCount = countif(IsNodeInService)\r\n| extend NIS_Percent = iff(Total > 0, round(NISCount / todouble(Total) * 100, 2), 0.0);\r\n\r\n// Calculate changes\r\nlet current_nis = toscalar(current_data | project NIS_Percent);\r\nlet yesterday_nis = toscalar(yesterday_data | project NIS_Percent);\r\nlet last_week_nis = toscalar(last_week_data | project NIS_Percent);\r\nlet last_month_nis = toscalar(last_month_data | project NIS_Percent);\r\n\r\nprint \r\n    DoD = round(current_nis - yesterday_nis, 2),\r\n    WoW = round(current_nis - last_week_nis, 2),\r\n    MoM = round(current_nis - last_month_nis, 2)",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Nodes In Service (NIS) Change (%)",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "AllocatedNodes": 3,
              "NodesinService": 2,
              "TotalClusters": 0,
              "TotalNodes": 1
            },
            "renameByName": {
              "AllocatedNodes": "Allocated Nodes",
              "NodesinService": "Nodes In Service",
              "TotalClusters": "Total Number of Clusters",
              "TotalNodes": "Total Number Of Nodes"
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "#EAB839",
                "value": 5
              },
              {
                "color": "#EF843C",
                "value": 10
              },
              {
                "color": "#6ED0E0",
                "value": 15
              },
              {
                "color": "red",
                "value": 20
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 27
      },
      "id": 61,
      "options": {
        "displayMode": "lcd",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "top",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [],
          "fields": "",
          "values": true
        },
        "showUnfilled": true,
        "sizing": "auto",
        "valueMode": "color"
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where NodeCategory == \"Compute\" \r\n    and IsUtilityNode == false\r\n    and CloudName == \"Public\"\r\n| where $__timeFilter(SnapshotTime)\r\n| where Region in~ ($region)\r\n| where Platform in~ ($platform)\r\n| where Customer in~ ($customer)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| extend EffectiveState = iff(isempty(Substate) or Substate == \"N/A\", State, Substate)\r\n| summarize \r\n    TotalNodes = dcount(NodeId),\r\n    OFRCount = dcountif(NodeId, EffectiveState == \"OFR\"),\r\n    InfinibandCount = dcountif(NodeId, EffectiveState == \"InfiniBand RCA\"),\r\n    HPCNVLCount = dcountif(NodeId, EffectiveState == \"HPC NVL RCA\"),\r\n    HPCIBCount = dcountif(NodeId, EffectiveState == \"HPC IB RCA\"),\r\n    TransitionCount = dcountif(NodeId, EffectiveState == \"Transition\"),\r\n    ValidationCount = dcountif(NodeId, EffectiveState == \"Validation\")\r\n| extend OFR = OFRCount\r\n| extend Infiniband = InfinibandCount\r\n| extend HPCNVL = HPCNVLCount\r\n| extend HPCIB = HPCIBCount\r\n| extend Transition =  TransitionCount \r\n| extend Validation = ValidationCount \r\n| project OFR, Infiniband, HPCNVL, HPCIB, Transition, Validation\r\n\r\n\r\n//PERCENTAGE calculation below\r\n// | extend OFR = 100.0 * OFRCount / TotalNodes\r\n// | extend Infiniband = 100.0 * InfinibandCount / TotalNodes\r\n// | extend HPCNVL = 100.0 * HPCNVLCount / TotalNodes\r\n// | extend HPCIB = 100.0 * HPCIBCount / TotalNodes\r\n// | extend Transition = 100.0 * TransitionCount / TotalNodes\r\n// | extend Validation = 100.0 * ValidationCount / TotalNodes\r\n// | project OFR, Infiniband, HPCNVL, HPCIB, Transition, Validation",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "OOS Categories Snapshot (# of Nodes)",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "NIS"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "HPCNVL": false,
              "Infiniband": true
            },
            "includeByName": {},
            "indexByName": {
              "HPCIB": 4,
              "HPCNVL": 3,
              "Infiniband": 2,
              "OFR": 0,
              "Transition": 5,
              "Validation": 1
            },
            "renameByName": {
              "HEN": "% HEN",
              "HPCIB": "Infiniband",
              "HPCNVL": "NVLink",
              "Infiniband": "Infiniband",
              "MTRA": "",
              "NIS": "% NIS",
              "OFR": "Out for Repair",
              "SLAStatus": "SLA Status",
              "Transition": "Transition",
              "Validation": "HPC Perfgate Validation"
            }
          }
        }
      ],
      "type": "bargauge"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 34
      },
      "id": 82,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "horizontal",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xField": "State",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// GDCO Ticket Count Summary - Pivot clusters as columns, states as rows\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster);\r\n\r\ncluster('datagalaxy.westus3.kusto.windows.net').database('COIDG').TicketsSnapshot\r\n| where State !in (\"Canceled\")\r\n| where AssetName in (nodes | project NodeId)\r\n| summarize arg_max(AzureCreationDate, *) by TicketId\r\n| join kind = inner nodes on $left.AssetName == $right.NodeId\r\n| summarize Count = count() by ClusterName, State\r\n| evaluate pivot(ClusterName, sum(Count))",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "GDCO Tickets by State - Count by Cluster",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "State"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Rank": true,
              "ResourceListStr": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "DSM12PrdGPC05": 1,
              "State": 0
            },
            "renameByName": {
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SourceTeam": "Source Team",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "barchart"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 42
      },
      "id": 48,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "\r\n// Use Grafana time range and filters\r\n// let totalLinkFlaps = cluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('NetworkHealth').table('MetricLinkFlap')\r\n//     | where $__timeFilter(TimeStamp)\r\n//     | where substring(BackendFabric, 0, 3) in ($datacenter)\r\n//     | where BackendFabric in~ ($cluster)\r\n//     | summarize TotalLinkFlaps = count();\r\n// let connectionTypeBreakdown = cluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('NetworkHealth').table('MetricLinkFlap')\r\n//     | where $__timeFilter(TimeStamp)\r\n//     | where substring(BackendFabric, 0, 3) in ($datacenter)\r\n//     | where BackendFabric in~ ($cluster)\r\n//     | summarize LinkFlaps = count() by ConnectionType\r\n//     | extend MetricType = strcat(\"LinkFlaps_\", ConnectionType);\r\n// totalLinkFlaps\r\n// | extend MetricType = \"TotalLinkFlaps\"\r\n// | project MetricType, LinkFlaps = TotalLinkFlaps\r\n// | union (connectionTypeBreakdown | project MetricType, LinkFlaps)\r\n\r\n// Use Grafana time range and filters - breakdown by connection type\r\n// Use Grafana time range and filters - multiple connection types in one summarize\r\ncluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('NetworkHealth').table('MetricLinkFlap')\r\n| where $__timeFilter(TimeStamp)\r\n| where substring(BackendFabric, 0, 3) in ($datacenter)\r\n| where BackendFabric in~ ($cluster)\r\n| summarize \r\n    TotalLinkFlaps = count(),\r\n    IB_to_IB = countif(ConnectionType == \"IB-IB\"),\r\n    IB_to_Server = countif(ConnectionType == \"IB-Server\"),\r\n    Server_to_IB = countif(ConnectionType == \"Server-IB\")\r\n    // Add more connection types as needed\r\n// Use Grafana time range and filters\r\n// let _endTime = $__timeTo();\r\n// let _startTime = $__timeFrom();\r\n// let linkFlaps = cluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('NetworkHealth').table('MetricLinkFlap')\r\n// //    | where BackendFabric in~ ($fabric)\r\n//     | where TimeStamp between (_startTime .. _endTime)\r\n//     // | where Region in~ ($region)\r\n//     // | where Platform in~ ($platform)\r\n//     // | where Customer in~ ($customer)\r\n//     | where substring(BackendFabric, 0, 3) in ($datacenter)\r\n//     | where BackendFabric in~ ($cluster)\r\n//     | summarize TotalLinkFlaps = count();\r\n// // let switchDowns = cluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('NetworkHealth').f_metricSwitchSMDrops(_startTime, _endTime)\r\n// //     | union cluster('https://azurehpc-westeurope.westeurope.kusto.windows.net').database('NetworkHealth').f_metricSwitchSMDrops(_startTime, _endTime)\r\n// //     | union cluster('https://azurehpc-japaneast.japaneast.kusto.windows.net').database('NetworkHealth').f_metricSwitchSMDrops(_startTime, _endTime)\r\n// //     | where BackendFabric in~ ($cluster)\r\n// //     | summarize TotalSwitchDowns = sum(SwitchDownCount);\r\n// linkFlaps\r\n// // | extend TotalSwitchDowns = toscalar(switchDowns)\r\n// | project TotalLinkFlaps",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "IB Link Flap Summary - Time Range",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Server_to_IB": true
            },
            "includeByName": {},
            "indexByName": {
              "IB_to_IB": 2,
              "IB_to_Server": 1,
              "Server_to_IB": 3,
              "TotalLinkFlaps": 0
            },
            "renameByName": {
              "AllocatedNodes": "Allocated Nodes",
              "IB_to_IB": "IB-IB",
              "IB_to_Server": "IB-Server",
              "NodesinService": "Nodes In Service",
              "Server_to_IB": "",
              "TotalClusters": "Total Number of Clusters",
              "TotalLinkFlaps": "Total",
              "TotalNodes": "Total Number Of Nodes"
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 6,
        "x": 12,
        "y": 42
      },
      "id": 60,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('syslog').SwitchDown\r\n| where $__timeFilter(PreciseTimeStamp)\r\n| project PreciseTimeStamp, DeviceName=toupper(SourceName), LogType, LoggingDevice\r\n| summarize SwitchDownCount=count() by DeviceName\r\n| join kind=leftouter (\r\n    cluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('syslog').DeviceMap \r\n    | project DeviceName, BackendFabric, Generation, OSVersion\r\n) on DeviceName\r\n| where substring(BackendFabric, 0, 3) in ($datacenter)\r\n| where BackendFabric in~ ($cluster)\r\n| summarize TotalSwitchDowns = sum(SwitchDownCount)",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Total IB Switch Down - Time Range",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Server_to_IB": true
            },
            "includeByName": {},
            "indexByName": {
              "IB_to_IB": 2,
              "IB_to_Server": 1,
              "Server_to_IB": 3,
              "TotalLinkFlaps": 0
            },
            "renameByName": {
              "AllocatedNodes": "Allocated Nodes",
              "IB_to_IB": "IB-IB",
              "IB_to_Server": "IB-Server",
              "NodesinService": "Nodes In Service",
              "Server_to_IB": "",
              "TotalClusters": "Total Number of Clusters",
              "TotalLinkFlaps": "Total",
              "TotalNodes": "Total Number Of Nodes"
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 6,
        "x": 18,
        "y": 42
      },
      "id": 59,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('hpcguesthealthsignals.eastus.kusto.windows.net').database('guesthealthreporting-telemetry').VmRequestDetails\r\n| where $__timeFilter(PreciseTimestamp)\r\n| where ObservationStatus != \"Healthy\"\r\n| join kind=inner (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n    | where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster)\r\n    | summarize arg_max(SnapshotTime, Platform) by NodeId\r\n) on NodeId\r\n| count \r\n// | summarize \r\n//     IssueCount = dcount(NodeId),\r\n//     TotalObservations = count(),\r\n//     SampleReason = take_any(RmaReason)",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Total GHR Requests - Time Range",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Server_to_IB": true
            },
            "includeByName": {},
            "indexByName": {
              "IB_to_IB": 2,
              "IB_to_Server": 1,
              "Server_to_IB": 3,
              "TotalLinkFlaps": 0
            },
            "renameByName": {
              "AllocatedNodes": "Allocated Nodes",
              "IB_to_IB": "IB-IB",
              "IB_to_Server": "IB-Server",
              "NodesinService": "Nodes In Service",
              "Server_to_IB": "",
              "TotalClusters": "Total Number of Clusters",
              "TotalLinkFlaps": "Total",
              "TotalNodes": "Total Number Of Nodes"
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 48
      },
      "id": 85,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// Customer and SKU breakdown by node count - Grafana formatted\r\nlet container_lookup = cluster('azcore.centralus.kusto.windows.net').database('AzureCP').MycroftContainerSnapshot_Latest\r\n| where IsTombstoned == false\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster)\r\n| summarize count() by PolicyName, SubscriptionId, ClusterName\r\n| project SubscriptionId, SKU = PolicyName, ClusterName, C = count_;\r\n\r\nlet customer_table_filtered = cluster('acciacudfollower.kusto.windows.net').database('CommonDims').Product360CustomerSubscriptions\r\n| where SubscriptionId in (container_lookup | summarize by SubscriptionId) \r\n| project SubscriptionId, TPID, TPNameTranslated;\r\n\r\ncontainer_lookup\r\n| join kind=leftouter (customer_table_filtered) on SubscriptionId\r\n| summarize NodeCount = sum(C) by TPID, TPNameTranslated, SKU, ClusterName\r\n| project-reorder \r\n    ClusterName,\r\n    TPNameTranslated, \r\n    NodeCount, \r\n    SKU,\r\n    TPID\r\n| order by NodeCount desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Customer Node Allocation Breakdown",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "NIS"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "NodesInService": true,
              "SLA95Count": true,
              "TPID": true,
              "TotalNodes": true
            },
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "ClusterName": "Cluster",
              "HEN": "% Healthy Empty Nodes (HEN)",
              "MTRA": "",
              "NIS": "% Nodes In Service (NIS)",
              "NodeCount": "Nodes",
              "NodeDelta95": "95% SLA Node Delta",
              "SKU": "",
              "SLAStatus": "SLA Status",
              "TPNameTranslated": "Customer Name"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "% Nodes In Service (NIS)"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "from": 0,
                      "result": {
                        "color": "red",
                        "index": 0
                      },
                      "to": 95
                    },
                    "type": "range"
                  },
                  {
                    "options": {
                      "from": 95,
                      "result": {
                        "color": "green",
                        "index": 1
                      },
                      "to": 100
                    },
                    "type": "range"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SLA Status"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "At Risk": {
                        "color": "red",
                        "index": 1
                      },
                      "Healthy": {
                        "color": "green",
                        "index": 0
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "% Healthy Empty Nodes (HEN)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 56
      },
      "id": 38,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where NodeCategory == \"Compute\" \r\n    and IsUtilityNode == false\r\n    and CloudName == \"Public\"\r\n| where $__timeFilter(SnapshotTime)\r\n| where Region in~ ($region)\r\n| where Platform in~ ($platform)\r\n| where Customer in~ ($customer)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| summarize \r\n    TotalNodes = dcount(NodeId),\r\n    NodesInService = dcountif(NodeId, IsNodeInService == true),\r\n    HealthyEmptyNodes = dcountif(NodeId, IsHEN == true)\r\n    by Platform\r\n| extend \r\n    NIS = round(100.0 * NodesInService / TotalNodes, 1),\r\n    HEN = round(100.0 * HealthyEmptyNodes / TotalNodes, 1)\r\n| extend \r\n    SLA95Count = ceiling(TotalNodes * 0.95),  // 95% of total nodes\r\n    NodeDelta95 = NodesInService - ceiling(TotalNodes * 0.95)  // How many nodes above/below 95%\r\n| extend SLAStatus = iff(NIS < 95, \"At Risk\", \"Healthy\")\r\n| project Platform, NIS, HEN, NodeDelta95, SLAStatus, TotalNodes, NodesInService, SLA95Count",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Platform Health Summary",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "NIS"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "NodesInService": true,
              "SLA95Count": true,
              "TotalNodes": true
            },
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "HEN": "% Healthy Empty Nodes (HEN)",
              "MTRA": "",
              "NIS": "% Nodes In Service (NIS)",
              "NodeDelta95": "95% SLA Node Delta",
              "SLAStatus": "SLA Status"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 64
      },
      "id": 86,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "6.2.0",
          "query": "// Bar Chart: Customer Rack Health Summary\nlet base = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\n| where $__timeFilter(SnapshotTime)\n//| where substring(Tenant, 0, 3) in ($datacenter)\n| where Tenant in~ ($cluster)\n// | where Region in~ ($region)\n// | where Platform in~ ($platform)\n// | where Customer in~ ($customer)\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\n| where IsUtilityNode == \"False\"\n| extend EffectiveState = iff(isempty(Substate) or Substate == \"N/A\", State, Substate);\n\n// Get customer mapping data\nlet container_lookup = cluster('azcore.centralus.kusto.windows.net').database('AzureCP').MycroftContainerSnapshot_Latest\n| where substring(ClusterName, 0, 3) in ($datacenter)\n| where ClusterName in~ ($cluster)\n| where IsTombstoned == false\n| project NodeId, SubscriptionId, PolicyName;\n\nlet customer_table_filtered = cluster('acciacudfollower.kusto.windows.net').database('CommonDims').Product360CustomerSubscriptions\n| where SubscriptionId in (container_lookup | summarize by SubscriptionId) \n| project SubscriptionId, TPID, TPNameTranslated;\n\nlet node_customer_mapping = container_lookup\n| join kind=leftouter customer_table_filtered on SubscriptionId\n| project NodeId, SubscriptionId, TPNameTranslated, TPID, SKU = PolicyName;\n\n// Join base data with customer info\nlet base_with_customers = base\n| join kind=leftouter node_customer_mapping on NodeId\n| extend CustomerName = coalesce(TPNameTranslated, \"Unknown Customer\");\n\n// Create rack state pivot table\nlet rack_states = base_with_customers\n| summarize Count = count() by RackID, EffectiveState\n| evaluate pivot(EffectiveState, sum(Count))\n| extend \n    Customer_Safe = coalesce(column_ifexists(\"Customer\", 0), 0),\n    HEN_Safe = coalesce(column_ifexists(\"HEN\", 0), 0),\n    OFR_Safe = coalesce(column_ifexists(\"OFR\", 0), 0),\n    Internal_Safe = coalesce(column_ifexists(\"Internal\", 0), 0),\n    Transition_Safe = coalesce(column_ifexists(\"Transition\", 0), 0),\n    Validation_Safe = coalesce(column_ifexists(\"Validation\", 0), 0),\n    InfiniBand_RCA_Safe = coalesce(column_ifexists(\"InfiniBand RCA\", 0), 0),\n    HPC_NVL_RCA_Safe = coalesce(column_ifexists(\"HPC NVL RCA\", 0), 0),\n    HPC_IB_RCA_Safe = coalesce(column_ifexists(\"HPC IB RCA\", 0), 0);\n\n// Get primary customer per rack\nlet rack_primary_customers = base_with_customers\n| where EffectiveState == \"Customer\"\n| summarize CustomerNodeCount = count() by RackID, CustomerName, SubscriptionId\n| summarize arg_max(CustomerNodeCount, CustomerName, SubscriptionId) by RackID\n| project RackID, PrimaryCustomer = CustomerName, PrimarySubscriptionId = SubscriptionId;\n\n// Customer rack health summary\nrack_states\n| join kind=leftouter rack_primary_customers on RackID\n| extend \n    Total_Nodes = Customer_Safe + HEN_Safe + OFR_Safe + Internal_Safe + Transition_Safe + Validation_Safe + InfiniBand_RCA_Safe + HPC_NVL_RCA_Safe + HPC_IB_RCA_Safe,\n    Healthy_Nodes = Customer_Safe + HEN_Safe,\n    HEN = HEN_Safe\n| extend Health_Percentage = round((todouble(Healthy_Nodes) / todouble(Total_Nodes)) * 100, 1)\n| summarize \n    TotalRacks = count(),\n    HealthyRacks = countif(Health_Percentage >= 95),\n    AvgHealthPercentage = round(avg(Health_Percentage), 1),\n    TotalNodes = sum(Total_Nodes),\n    HealthyNodes = sum(Healthy_Nodes),\n    HEN_ = sum(HEN),\n    Customer_ = sum(Customer_Safe),\n    ProblematicRacks = countif(Health_Percentage < 80)\n    by PrimaryCustomer = coalesce(PrimaryCustomer, \"No Customer Assigned\")\n| project \n    Customer = PrimaryCustomer,\n    TotalRacks,\n    HealthyRacks,\n    ProblematicRacks,\n    AvgHealthPercentage,\n    TotalNodes, \n    HealthyNodes,\n    HEN_,\n    Customer_\n| order by AvgHealthPercentage desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Rack Overview by Customer",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Customer_": true,
              "HEN_": true,
              "ProblematicRacks": true,
              "TotalNodes": false,
              "TotalRacks": false
            },
            "includeByName": {},
            "indexByName": {
              "AvgHealthPercentage": 3,
              "Customer": 0,
              "HealthyNodes": 2,
              "HealthyRacks": 5,
              "ProblematicRacks": 6,
              "TotalNodes": 1,
              "TotalRacks": 4
            },
            "renameByName": {
              "AvgHealthPercentage": "NIS Percentage ",
              "HealthyNodes": "Healthy Nodes",
              "HealthyRacks": "Healthy Racks (NIS > 95%)",
              "ProblematicRacks": "",
              "TotalNodes": "Total Nodes",
              "TotalRacks": "Total Racks "
            }
          }
        }
      ],
      "type": "barchart"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto",
              "wrapText": true
            },
            "filterable": true,
            "inspect": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Healthy Nodes %"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "from": 0,
                      "result": {
                        "color": "red",
                        "index": 0
                      },
                      "to": 25
                    },
                    "type": "range"
                  },
                  {
                    "options": {
                      "from": 25,
                      "result": {
                        "color": "orange",
                        "index": 1
                      },
                      "to": 50
                    },
                    "type": "range"
                  },
                  {
                    "options": {
                      "from": 50,
                      "result": {
                        "color": "blue",
                        "index": 2
                      },
                      "to": 95
                    },
                    "type": "range"
                  },
                  {
                    "options": {
                      "from": 95,
                      "result": {
                        "color": "green",
                        "index": 3
                      },
                      "to": 100
                    },
                    "type": "range"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 73
      },
      "id": 84,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// // Rack-Level Health Analysis - Grafana Formatted\r\n// // Get base dataset with latest node states\r\n// let base = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n// | where $__timeFilter(SnapshotTime)\r\n// | where substring(Tenant, 0, 3) in ($datacenter)\r\n// | where Tenant in~ ($cluster)\r\n// | where Region in~ ($region)\r\n// | where Platform in~ ($platform)\r\n// | where Customer in~ ($customer)\r\n// | summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n// | where IsUtilityNode == \"False\"\r\n// | extend EffectiveState = iff(isempty(Substate) or Substate == \"N/A\", State, Substate);\r\n\r\n// // Create rack state pivot table with effective states\r\n// let rack_states = base\r\n// | summarize Count = count() by RackID, EffectiveState\r\n// | evaluate pivot(EffectiveState, sum(Count))\r\n// | extend \r\n//     Customer_Safe = coalesce(column_ifexists(\"Customer\", 0), 0),\r\n//     HEN_Safe = coalesce(column_ifexists(\"HEN\", 0), 0),\r\n//     OFR_Safe = coalesce(column_ifexists(\"OFR\", 0), 0),\r\n//     Internal_Safe = coalesce(column_ifexists(\"Internal\", 0), 0),\r\n//     Transition_Safe = coalesce(column_ifexists(\"Transition\", 0), 0),\r\n//     Validation_Safe = coalesce(column_ifexists(\"Validation\", 0), 0),\r\n//     InfiniBand_RCA_Safe = coalesce(column_ifexists(\"InfiniBand RCA\", 0), 0),\r\n//     HPC_NVL_RCA_Safe = coalesce(column_ifexists(\"HPC NVL RCA\", 0), 0),\r\n//     HPC_IB_RCA_Safe = coalesce(column_ifexists(\"HPC IB RCA\", 0), 0);\r\n\r\n// // Final rack health analysis\r\n// rack_states\r\n// | extend \r\n//     Total_Nodes = Customer_Safe + HEN_Safe + OFR_Safe + Internal_Safe + Transition_Safe + Validation_Safe + InfiniBand_RCA_Safe + HPC_NVL_RCA_Safe + HPC_IB_RCA_Safe,\r\n//     Healthy_Nodes = Customer_Safe + HEN_Safe,\r\n//     OFR_Nodes = OFR_Safe,\r\n//     Internal_Nodes = Internal_Safe,\r\n//     Transition_Nodes = Transition_Safe,\r\n//     Validation_Nodes = Validation_Safe,\r\n//     InfiniBand_RCA_Nodes = InfiniBand_RCA_Safe,\r\n//     HPC_NVL_RCA_Nodes = HPC_NVL_RCA_Safe,\r\n//     HPC_IB_RCA_Nodes = HPC_IB_RCA_Safe\r\n// | extend \r\n//     Health_Percentage = round((todouble(Healthy_Nodes) / todouble(Total_Nodes)) * 100, 1)\r\n//     // OFR_Percentage = round((todouble(OFR_Nodes) / todouble(Total_Nodes)) * 100, 1),\r\n//     // HPC_NVL_Percentage = round((todouble(HPC_NVL_RCA_Nodes) / todouble(Total_Nodes)) * 100, 1),\r\n//     // HPC_IB_Percentage = round((todouble(HPC_IB_RCA_Nodes) / todouble(Total_Nodes)) * 100, 1)\r\n// | project \r\n//     RackID,\r\n//     Total_Nodes,\r\n//     Healthy_Nodes, \r\n//     Health_Percentage,\r\n//     Customer = Customer_Safe,\r\n//     HEN = HEN_Safe,\r\n//     OFR = OFR_Safe,\r\n//     // OFR_Percentage,\r\n//     NVL_RCA = HPC_NVL_RCA_Nodes,\r\n//     // NVL_Percentage = HPC_NVL_Percentage,\r\n//     IB_RCA = HPC_IB_RCA_Nodes,\r\n//     // IB_Percentage = HPC_IB_Percentage,\r\n//     // InfiniBand_RCA = InfiniBand_RCA_Nodes,\r\n//     Internal = Internal_Nodes,\r\n//     Validation = Validation_Nodes,\r\n//     Transition = Transition_Nodes\r\n// | order by Health_Percentage desc, Healthy_Nodes desc\r\n\r\n// Rack-Level Health Analysis with Customer Info - Grafana Formatted\r\n// Get base node data\r\nlet base = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where $__timeFilter(SnapshotTime)\r\n// | where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n// | where Region in~ ($region)\r\n// | where Platform in~ ($platform)\r\n// | where Customer in~ ($customer)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| where IsUtilityNode == \"False\"\r\n| extend EffectiveState = iff(isempty(Substate) or Substate == \"N/A\", State, Substate);\r\n\r\n// Get customer mapping data\r\nlet container_lookup = cluster('azcore.centralus.kusto.windows.net').database('AzureCP').MycroftContainerSnapshot_Latest\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster)\r\n| where IsTombstoned == false\r\n| project NodeId, SubscriptionId, PolicyName;\r\n\r\nlet customer_table_filtered = cluster('acciacudfollower.kusto.windows.net').database('CommonDims').Product360CustomerSubscriptions\r\n| where SubscriptionId in (container_lookup | summarize by SubscriptionId) \r\n| project SubscriptionId, TPID, TPNameTranslated;\r\n\r\nlet node_customer_mapping = container_lookup\r\n| join kind=leftouter customer_table_filtered on SubscriptionId\r\n| project NodeId, SubscriptionId, TPNameTranslated, TPID, SKU = PolicyName;\r\n\r\n// Join base data with customer info and create rack-level customer mapping\r\nlet base_with_customers = base\r\n| join kind=leftouter node_customer_mapping on NodeId\r\n| extend CustomerName = coalesce(TPNameTranslated, \"Unknown Customer\");\r\n\r\n// Create rack state pivot table with effective states\r\nlet rack_states = base_with_customers\r\n| summarize Count = count() by RackID, EffectiveState\r\n| evaluate pivot(EffectiveState, sum(Count))\r\n| extend \r\n    Customer_Safe = coalesce(column_ifexists(\"Customer\", 0), 0),\r\n    HEN_Safe = coalesce(column_ifexists(\"HEN\", 0), 0),\r\n    OFR_Safe = coalesce(column_ifexists(\"OFR\", 0), 0),\r\n    Internal_Safe = coalesce(column_ifexists(\"Internal\", 0), 0),\r\n    Transition_Safe = coalesce(column_ifexists(\"Transition\", 0), 0),\r\n    Validation_Safe = coalesce(column_ifexists(\"Validation\", 0), 0),\r\n    InfiniBand_RCA_Safe = coalesce(column_ifexists(\"InfiniBand RCA\", 0), 0),\r\n    HPC_NVL_RCA_Safe = coalesce(column_ifexists(\"HPC NVL RCA\", 0), 0),\r\n    HPC_IB_RCA_Safe = coalesce(column_ifexists(\"HPC IB RCA\", 0), 0);\r\n\r\n// Get primary customer per rack (customer with most nodes in that rack)\r\nlet rack_primary_customers = base_with_customers\r\n| where EffectiveState == \"Customer\"  // Only count actual customer nodes\r\n| summarize CustomerNodeCount = count() by RackID, CustomerName, SubscriptionId\r\n| summarize arg_max(CustomerNodeCount, CustomerName, SubscriptionId) by RackID\r\n| project RackID, PrimaryCustomer = CustomerName, PrimarySubscriptionId = SubscriptionId;\r\n\r\n// Final rack health analysis with customer info\r\nrack_states\r\n| join kind=leftouter rack_primary_customers on RackID\r\n| extend \r\n    Total_Nodes = Customer_Safe + HEN_Safe + OFR_Safe + Internal_Safe + Transition_Safe + Validation_Safe + InfiniBand_RCA_Safe + HPC_NVL_RCA_Safe + HPC_IB_RCA_Safe,\r\n    Healthy_Nodes = Customer_Safe + HEN_Safe\r\n| extend \r\n    Health_Percentage = round((todouble(Healthy_Nodes) / todouble(Total_Nodes)) * 100, 1)\r\n| project \r\n    RackID,\r\n    PrimaryCustomer = coalesce(PrimaryCustomer, \"No Customer Assigned\"),\r\n    SubscriptionId = coalesce(PrimarySubscriptionId, \"N/A\"),\r\n    Total_Nodes,\r\n    Healthy_Nodes, \r\n    Health_Percentage,\r\n    Customer = Customer_Safe,\r\n    HEN = HEN_Safe,\r\n    OFR = OFR_Safe,\r\n    NVL_RCA = HPC_NVL_RCA_Safe,\r\n    IB_RCA = HPC_IB_RCA_Safe,\r\n    Internal = Internal_Safe,\r\n    Validation = Validation_Safe,\r\n    Transition = Transition_Safe\r\n| order by Health_Percentage desc, Healthy_Nodes desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Rack Health Summary",
      "transformations": [
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "NIS"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Customer_Safe": true,
              "HEN": false,
              "HEN_Safe": true,
              "HPC IB RCA": true,
              "HPC_IB_Percentage": true,
              "HPC_IB_RCA_Safe": true,
              "HPC_NVL_Percentage": true,
              "HPC_NVL_RCA_Safe": true,
              "InfiniBand_RCA_Safe": true,
              "Internal_Safe": true,
              "NodesInService": true,
              "OFR": false,
              "OFR_Percentage": true,
              "OFR_Safe": true,
              "SLA95Count": true,
              "TotalNodes": true,
              "Transition_Safe": true,
              "Validation": false,
              "Validation_Safe": true
            },
            "includeByName": {},
            "indexByName": {
              "Customer": 6,
              "HEN": 7,
              "Health_Percentage": 3,
              "Healthy_Nodes": 5,
              "IB_RCA": 9,
              "Internal": 12,
              "NVL_RCA": 10,
              "OFR": 8,
              "PrimaryCustomer": 1,
              "RackID": 0,
              "SubscriptionId": 2,
              "Total_Nodes": 4,
              "Transition": 11,
              "Validation": 13
            },
            "renameByName": {
              "Customer": "Customer Nodes",
              "HEN": "HEN",
              "HPC_IB_RCA_Nodes": "Infinband RCA Nodes",
              "HPC_NVL_RCA_Nodes": "NVLink RCA Nodes",
              "Health_Percentage": "Healthy Nodes %",
              "Healthy_Nodes": "Healthy Nodes",
              "IB_RCA": "Infiniband RCA",
              "InfiniBand_RCA_Nodes": "",
              "MTRA": "",
              "NIS": "% Nodes In Service (NIS)",
              "NVL_RCA": "NVLink RCA",
              "NodeDelta95": "95% SLA Node Delta",
              "OFR": "OFR",
              "OFR_Nodes": "OFR",
              "OFR_Percentage": "",
              "PrimaryCustomer": "Customer ",
              "RackID": "Rack ID",
              "SLAStatus": "SLA Status",
              "SubscriptionId": "Subscription ID",
              "Total_Nodes": "Total Nodes",
              "Transition": "",
              "Validation": "Perfgate Validation"
            }
          }
        },
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": false,
                "field": "Healthy Nodes %"
              }
            ]
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 81
      },
      "id": 57,
      "panels": [],
      "title": "Faults & Fault Handling",
      "type": "row"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Nodes In Service(NIS)"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "from": 0,
                      "result": {
                        "color": "red",
                        "index": 0
                      },
                      "to": 95
                    },
                    "type": "range"
                  },
                  {
                    "options": {
                      "from": 95,
                      "result": {
                        "color": "green",
                        "index": 1
                      },
                      "to": 100
                    },
                    "type": "range"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SLA Status"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "At Risk": {
                        "color": "red",
                        "index": 1
                      },
                      "Healthy": {
                        "color": "green",
                        "index": 0
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Fault Description"
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 82
      },
      "id": 68,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "horizontal",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xField": "StateAggregate",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// Pivot clusters as columns, states as rows\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster);\r\n\r\ncluster('azurecm').database('AzureCM').LogNodeSnapshot\r\n| where nodeId in (nodes | project NodeId)\r\n| where $__timeFilter(PreciseTimeStamp)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| where Region in~ ($region)\r\n| where CloudName == \"Public\"\r\n| summarize arg_max(PreciseTimeStamp, *) by nodeId, hostName\r\n| extend StateAggregate = strcat(nodeState, \"/\", nodeAvailabilityState)\r\n| summarize Count = count() by Tenant, StateAggregate\r\n| evaluate pivot(Tenant, sum(Count))",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        },
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": true,
          "pluginVersion": "6.1.0",
          "query": "let tm_nodes = cluster('azurecm').database('AzureCM').LogNodeSnapshot\n| where $__timeFilter(PreciseTimeStamp)\n| where substring(Tenant, 0, 3) in ($datacenter)\n| where Tenant in~ ($cluster)\n| where Region in~ ($region)\n| where CloudName == \"Public\"\n| summarize arg_max(PreciseTimeStamp, *) by nodeId\n| project NodeId = nodeId;\n\ncluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\n| where substring(ClusterName, 0, 3) in ($datacenter)\n| where ClusterName in~ ($cluster)\n| join kind=leftanti tm_nodes on NodeId\n| join kind=leftouter (\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\n    | where $__timeFilter(SnapshotTime)\n    | where substring(Tenant, 0, 3) in ($datacenter)\n    | where Tenant in~ ($cluster)\n    | summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\n    | project NodeId, Platform, State, IsOutOfService\n) on NodeId\n| extend MissingFromTM = \"YES\", DCM_DataAvailable = \"NO\"\n| project-reorder MissingFromTM, DCM_DataAvailable, NodeId, Platform, State, IsOutOfService, ClusterName, SoCId, BladeId",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "B",
          "resultFormat": "table"
        },
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": true,
          "pluginVersion": "6.1.0",
          "query": "// Get all nodes from inventory\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\n| where substring(ClusterName, 0, 3) in ($datacenter)\n| where ClusterName in~ ($cluster);\n\n// Get nodes that exist in TM with their states\nlet tm_nodes = cluster('azurecm').database('AzureCM').LogNodeSnapshot\n| where nodeId in (nodes | project NodeId)\n| where $__timeFilter(PreciseTimeStamp)\n| where substring(Tenant, 0, 3) in ($datacenter)\n| where Tenant in~ ($cluster)\n| where Region in~ ($region)\n| where CloudName == \"Public\"\n| summarize arg_max(PreciseTimeStamp, *) by nodeId, hostName\n| extend StateAggregate = strcat(nodeState, \"/\", nodeAvailabilityState)\n| project NodeId = nodeId, Tenant, StateAggregate;\n\n// Get nodes missing from TM\nlet missing_nodes = nodes\n| join kind=leftanti tm_nodes on NodeId\n| extend StateAggregate = \"Missing/NotInTM\"\n| project NodeId, Tenant = ClusterName, StateAggregate;\n\n// Combine both datasets\ntm_nodes \n| union missing_nodes\n| summarize Count = count() by Tenant, StateAggregate\n| evaluate pivot(Tenant, sum(Count))",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "C",
          "resultFormat": "table"
        }
      ],
      "title": "TM State Breakdown - Node Counts by Cluster",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "StateAggregate"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Rank": true,
              "ResourceListStr": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "CleanedReason": 3,
              "EscalateTo": 5,
              "FaultCode": 2,
              "HawkeyeRCAs": 4,
              "NodeListStr": 7,
              "NodeStatesStr": 6,
              "Nodes": 1,
              "Platform": 0
            },
            "renameByName": {
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SourceTeam": "Source Team",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "barchart"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto",
              "wrapText": false
            },
            "filterable": true,
            "inspect": true
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node Id"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "https://dagraf-mscycle-f4gdf7fgdtfac4ft.eus2.grafana.azure.com/d/cemixfipo7hfkanode/node-view?orgId=1&from=now-24h&to=now&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node Id\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg SM Utilization"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 91
      },
      "id": 71,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// Use Grafana time range and filters - Complete Parse_FaultInfo implementation WITH PLATFORM\r\ncluster('azurecm').database('AzureCM').LogNodeSnapshot\r\n| where $__timeFilter(PreciseTimeStamp)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| where Region in~ ($region)\r\n| where CloudName == \"Public\"\r\n| summarize arg_max(PreciseTimeStamp, *) by nodeId\r\n| where isnotempty(faultInfo)\r\n| extend FaultInfo = tostring(faultInfo)\r\n// Parse JSON and extract basic fields (all your exact parsing logic)\r\n| extend json = parse_json(FaultInfo)\r\n| extend ReportReason = tostring(json.Reason)\r\n| extend json = iff(ReportReason startswith \"{\", parse_json(ReportReason), json)\r\n| extend json_ReportReason = tostring(json.Reason)\r\n| parse ReportReason with * \"\\\"Reason\\\":\\\"\" ParsedReason \"\\\"\" *\r\n| extend new_ReportReason = iff(ReportReason startswith \"{\" and isempty(json_ReportReason), ParsedReason, json_ReportReason)\r\n| extend ReportReason = iff(ReportReason startswith \"{\", new_ReportReason, ReportReason)\r\n| extend FaultCode = toint(json.FaultCode)\r\n| extend FaultTime = todatetime(json.Time)\r\n| extend EscalateTo = replace_string(extract('EscalateTo\\\",\\\"Value\\\":\\\"(.+?)\\\"', 1, FaultInfo), @\"\\\\\", @\"\\\")\r\n| parse FaultInfo with * 'SourceOfFault\\\\\":\\\\\"' SourceOfFault: string '\\\\\"' *\r\n| parse FaultInfo with * '\\\"Name\\\":\\\"FaultedByExternalEntity\\\",\\\"Value\\\":\\\"AME\\\\\\\\' UserName:string '\\\"' *\r\n| parse FaultInfo with * '\\\\\"Diagnostic_Summary\\\\\":\\\\\"' DiagnosticSummary:string '\\\\\"' *\r\n| parse DiagnosticSummary with * 'Sending node to OFR because of ' GHRReason:string ':' *\r\n| parse DiagnosticSummary with GHRReason1:string \":\" * \r\n| extend GHRReason = iff(isempty(GHRReason) and isnotempty(GHRReason1), GHRReason1, GHRReason)\r\n// Create buckets\r\n| extend Bucket = iff(SourceOfFault contains \"GuestHealthReporting\", \"GHR\", \"Other\")\r\n| extend Bucket = iff(SourceOfFault contains \"IssuedByCSI-Sparkle\", \"HHS\", Bucket)\r\n| extend Bucket = iff(isnotempty(UserName), \"Manual\", Bucket)\r\n| extend ReportReason = iff(Bucket == \"GHR\" and isnotempty(DiagnosticSummary), DiagnosticSummary, ReportReason)\r\n// Trim known noise\r\n| extend CleanedReportReason = trim_end(@'HawkeyeRCA.*', ReportReason)\r\n| extend CleanedReportReason = trim_end(@'\\.\\s*', CleanedReportReason)\r\n| extend CleanedReportReason = trim_end(@'and RuleType:.*', CleanedReportReason)\r\n| extend CleanedReportReason = trim_end(@'BugCheckTimeStamp .*', CleanedReportReason)\r\n// Parse specific cases from function\r\n| parse FaultInfo with * \"Bad hardware health: 75 -\" * 'Reason\\\\\":\\\\\"' BadHWHealthReason:string '\\\\\"' *\r\n| extend CleanedReportReason = iff(CleanedReportReason startswith \"Bad hardware health: 75 -\", strcat(\"Bad hardware health: \", BadHWHealthReason), CleanedReportReason)\r\n| parse FaultInfo with * \"Reporting recovery failure to fault handler. Marking node HI with fault:\" * 'Reason:' RecoveryFailureReason:string ')' * \r\n| extend CleanedReportReason = iff(CleanedReportReason startswith \"Reporting recovery failure to fault handler. Marking node HI with fault:\", strcat(\"Reporting recovery failure to fault handler. Marking node HI with fault: \", RecoveryFailureReason), CleanedReportReason)\r\n| parse FaultInfo with * \"Node is Unhealthy. Fabric can't reach RdAgent.Hardware error found in SEL.\" * 'EventType:' RdAgentEventType:string ',' * ', EventMessage:' RdAgentEventMessage:string '\\\",\\\"Time' *\r\n| extend CleanedReportReason = iff(CleanedReportReason startswith \"Node is Unhealthy. Fabric can't reach RdAgent.Hardware error found in SEL\", strcat(\"Node is Unhealthy. Fabric can't reach RdAgent.Hardware error found in SEL. EventType:\", RdAgentEventType, \", EventMessage:\", RdAgentEventMessage), CleanedReportReason)\r\n| parse FaultInfo with Error \" since \" Day: date\r\n| extend CleanedReportReason = iff(isnotempty(Error) and isnotempty(Day), Error, CleanedReportReason)\r\n| extend CleanedReportReason = trim_end(@'. HawkeyeRCA.*', CleanedReportReason)\r\n// Key normalizations from the function\r\n| extend CleanedReportReason = iff(CleanedReportReason startswith \"Reporting recovery failure to fault handler\" and CleanedReportReason contains \"stuck in recovery since\",\r\n                             \"Reporting recovery failure to fault handler - stuck in recovery, exceeding the timeout of 1800. Marking node HI.\", \r\n                             CleanedReportReason)\r\n| extend CleanedReportReason = iff(CleanedReportReason startswith \"Node is Unhealthy. Fabric can't reach RdAgent\" and CleanedReportReason contains \"Additional triage required\",\r\n                             \"Node is Unhealthy. Fabric can't reach RdAgent. Mitigating the impact as Node is Unhealthy, Additional triage required for actual RCA.\",\r\n                             CleanedReportReason)\r\n| extend CleanedReportReason = trim_end(@\"\\s*\", CleanedReportReason)\r\n| extend CleanedReportReason = iff(Bucket == \"GHR\" and isnotempty(DiagnosticSummary), DiagnosticSummary, CleanedReportReason)\r\n| extend CleanedReportReason = iff(Bucket == \"GHR\" and isnotempty(GHRReason), GHRReason, CleanedReportReason)\r\n// Handle special cases\r\n| extend Spare = iff(CleanedReportReason startswith \"Node is Unhealthy.\" or CleanedReportReason startswith \"Reporting recovery failure to fault handler.\", CleanedReportReason, \"\")\r\n| extend CleanedReportReason = split(CleanedReportReason, \".\", 0)\r\n| parse CleanedReportReason with * '[\\\"' CleanedReportReason: string '\\\"]' *\r\n| extend CleanedReportReason = iff(isnotempty(Spare), Spare, CleanedReportReason)\r\n// Replace GUIDs with placeholders\r\n| extend CleanedReportReason = replace_regex(CleanedReportReason, @\"\\b[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\b\", \"<GUID_PLACEHOLDER>\")\r\n// Add HawkeyeRCA\r\n| extend HawkeyeRCA = extract('\\\"Name\\\":\\\"HawkeyeRCA\\\",\\\"Value\\\":\\\"([^\\\"]+)\\\"', 1, FaultInfo)\r\n| extend CleanedReason = strcat(Bucket, \": \", CleanedReportReason)\r\n| extend NodeState = strcat(nodeState, \"/\", nodeAvailabilityState)\r\n| where isnotempty(FaultCode) and isnotempty(CleanedReason)\r\n// JOIN PLATFORM INFO AFTER processing (using leftouter to preserve all faults)\r\n| join kind=leftouter (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where $__timeFilter(SnapshotTime)\r\n    | where substring(Tenant, 0, 3) in ($datacenter)\r\n    | where Tenant in~ ($cluster)\r\n    | summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n    | project NodeId, Platform\r\n) on $left.nodeId == $right.NodeId\r\n| extend Platform = coalesce(Platform, \"Unknown\")\r\n| summarize \r\n    Nodes = count(), \r\n    HawkeyeRCAsList = make_set_if(HawkeyeRCA, isnotempty(HawkeyeRCA)), \r\n    EscalateToList = make_set_if(EscalateTo, isnotempty(EscalateTo)),\r\n    NodeList = make_set(nodeId),\r\n    NodeStates = make_set(NodeState)\r\n    by Platform, FaultCode, CleanedReason  // ADDED Platform to grouping\r\n// Convert arrays to strings\r\n| extend EscalateTo = case(\r\n    array_length(EscalateToList) == 0, \"\",\r\n    array_length(EscalateToList) == 1, tostring(EscalateToList[0]),\r\n    strcat_array(EscalateToList, \"; \")\r\n)\r\n| extend HawkeyeRCAs = case(\r\n    array_length(HawkeyeRCAsList) == 0, \"\",\r\n    array_length(HawkeyeRCAsList) == 1, tostring(HawkeyeRCAsList[0]),\r\n    strcat_array(HawkeyeRCAsList, \"; \")\r\n)\r\n| extend NodeStatesStr = strcat_array(NodeStates, \"; \")\r\n| extend NodeListStr = strcat_array(NodeList, \"; \")\r\n| project Platform, Nodes, FaultCode, CleanedReason, HawkeyeRCAs, EscalateTo, NodeStatesStr, NodeListStr\r\n| partition by Platform (sort by Nodes desc | take $top_n_faults)  // ADD TOP N BY PLATFORM\r\n| sort by Platform, Nodes desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Top $top_n_faults TM Faults by Fault Reason per Platform",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "EscalateTo": false,
              "HawkeyeRCA": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Nodes": false,
              "ObservationStatus": true,
              "SampleReason": true,
              "TotalObservations": true
            },
            "includeByName": {},
            "indexByName": {
              "CleanedReason": 4,
              "EscalateTo": 6,
              "FaultCode": 3,
              "HawkeyeRCA": 5,
              "NodeId": 2,
              "Nodes": 1,
              "Platform": 0
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "CleanedReason": "Fault Reason",
              "Cluster": "Cluster",
              "FaultCode": "Fault Code",
              "HawkeyeRCAs": "",
              "NodeId": "Node Id",
              "Nodes": "Nodes",
              "ObservationStatus": "",
              "ObservationType": "Observation Type",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto",
              "wrapText": false
            },
            "filterable": true,
            "inspect": true
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Node view",
                    "url": "/d/cemixfipo7hfkanode/node-view?orgId=1&from=${__from}﻿&to=﻿${__to}﻿&var-cluster=﻿${__data.fields.Cluster}﻿&var-node_id=${__data.fields[\"Node ID\"]}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 99
      },
      "id": 73,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// Use Grafana time range and filters - TM Fault dump with Hours, Tenant, and Node States\r\ncluster('azurecm').database('AzureCM').LogNodeSnapshot\r\n| where $__timeFilter(PreciseTimeStamp)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| where Region in~ ($region)\r\n| where CloudName == \"Public\"\r\n| summarize arg_max(PreciseTimeStamp, *) by nodeId\r\n| where isnotempty(faultInfo)\r\n| extend FaultInfo = tostring(faultInfo)\r\n// Parse JSON and extract basic fields\r\n| extend json = parse_json(FaultInfo)\r\n| extend ReportReason = tostring(json.Reason)\r\n| extend json = iff(ReportReason startswith \"{\", parse_json(ReportReason), json)\r\n| extend json_ReportReason = tostring(json.Reason)\r\n| parse ReportReason with * \"\\\"Reason\\\":\\\"\" ParsedReason \"\\\"\" *\r\n| extend new_ReportReason = iff(ReportReason startswith \"{\" and isempty(json_ReportReason), ParsedReason, json_ReportReason)\r\n| extend ReportReason = iff(ReportReason startswith \"{\", new_ReportReason, ReportReason)\r\n| extend FaultCode = toint(json.FaultCode)\r\n| extend FaultTime = todatetime(json.Time)\r\n| extend EscalateTo = replace_string(extract('EscalateTo\\\",\\\"Value\\\":\\\"(.+?)\\\"', 1, FaultInfo), @\"\\\\\", @\"\\\")\r\n| parse FaultInfo with * 'SourceOfFault\\\\\":\\\\\"' SourceOfFault: string '\\\\\"' *\r\n| parse FaultInfo with * '\\\"Name\\\":\\\"FaultedByExternalEntity\\\",\\\"Value\\\":\\\"AME\\\\\\\\' UserName:string '\\\"' *\r\n| parse FaultInfo with * '\\\\\"Diagnostic_Summary\\\\\":\\\\\"' DiagnosticSummary:string '\\\\\"' *\r\n| parse DiagnosticSummary with * 'Sending node to OFR because of ' GHRReason:string ':' *\r\n| parse DiagnosticSummary with GHRReason1:string \":\" * \r\n| extend GHRReason = iff(isempty(GHRReason) and isnotempty(GHRReason1), GHRReason1, GHRReason)\r\n// Create buckets\r\n| extend Bucket = iff(SourceOfFault contains \"GuestHealthReporting\", \"GHR\", \"Other\")\r\n| extend Bucket = iff(SourceOfFault contains \"IssuedByCSI-Sparkle\", \"HHS\", Bucket)\r\n| extend Bucket = iff(isnotempty(UserName), \"Manual\", Bucket)\r\n| extend ReportReason = iff(Bucket == \"GHR\" and isnotempty(DiagnosticSummary), DiagnosticSummary, ReportReason)\r\n// Clean the report reason (key normalization steps)\r\n| extend CleanedReportReason = trim_end(@'HawkeyeRCA.*', ReportReason)\r\n| extend CleanedReportReason = trim_end(@'\\.\\s*', CleanedReportReason)\r\n| extend CleanedReportReason = iff(CleanedReportReason startswith \"Node is Unhealthy. Fabric can't reach RdAgent\" and CleanedReportReason contains \"Additional triage required\",\r\n                             \"Node is Unhealthy. Fabric can't reach RdAgent. Mitigating the impact as Node is Unhealthy, Additional triage required for actual RCA.\",\r\n                             CleanedReportReason)\r\n| extend CleanedReportReason = iff(CleanedReportReason startswith \"Reporting recovery failure to fault handler\" and CleanedReportReason contains \"stuck in recovery since\",\r\n                             \"Reporting recovery failure to fault handler - stuck in recovery, exceeding the timeout of 1800. Marking node HI.\", \r\n                             CleanedReportReason)\r\n// Replace GUIDs with placeholders\r\n| extend CleanedReportReason = replace_regex(CleanedReportReason, @\"\\b[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\b\", \"<GUID_PLACEHOLDER>\")\r\n// Add HawkeyeRCA\r\n| extend HawkeyeRCA = extract('\\\"Name\\\":\\\"HawkeyeRCA\\\",\\\"Value\\\":\\\"([^\\\"]+)\\\"', 1, FaultInfo)\r\n| extend CleanedReason = strcat(Bucket, \": \", CleanedReportReason)\r\n// Calculate hours with fault\r\n| extend HoursWithFault = round(datetime_diff('hour', now(), FaultTime), 2)\r\n| where isnotempty(FaultCode) and isnotempty(CleanedReason)\r\n// JOIN PLATFORM INFO AFTER processing (using leftouter to preserve all faults)\r\n| join kind=leftouter (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where $__timeFilter(SnapshotTime)\r\n    | where substring(Tenant, 0, 3) in ($datacenter)\r\n    | where Tenant in~ ($cluster)\r\n    | summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n    | project NodeId, Platform, State,IsOutOfService, IsCustomer, RackID\r\n) on $left.nodeId == $right.NodeId\r\n| extend Platform = coalesce(Platform, \"Unknown\")\r\n| project \r\n    NodeId = nodeId,\r\n    Platform,\r\n    Tenant,\r\n    NodeState = nodeState,\r\n    NodeAvailabilityState = nodeAvailabilityState,\r\n    FaultCode, \r\n    CleanedReason, \r\n    HawkeyeRCA = coalesce(HawkeyeRCA, \"\"),\r\n    EscalateTo = coalesce(EscalateTo, \"\"),\r\n    HoursWithFault,\r\n    FaultTime,\r\n    State,\r\n    IsOutOfService,\r\n    IsCustomer,\r\n    RackID\r\n| order by HoursWithFault desc, Platform, FaultCode",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "TM Fault Log Nodes Breakdown",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "EscalateTo": true,
              "FaultTime": true,
              "HawkeyeRCA": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Nodes": true,
              "ObservationStatus": true,
              "SampleReason": true,
              "State": false,
              "TotalObservations": true
            },
            "includeByName": {},
            "indexByName": {
              "CleanedReason": 10,
              "EscalateTo": 12,
              "FaultCode": 9,
              "FaultTime": 14,
              "HawkeyeRCA": 11,
              "HoursWithFault": 13,
              "IsCustomer": 5,
              "IsOutOfService": 4,
              "NodeAvailabilityState": 8,
              "NodeId": 3,
              "NodeState": 7,
              "Platform": 0,
              "RackID": 2,
              "State": 6,
              "Tenant": 1
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "CleanedReason": "Fault Reason",
              "Cluster": "Cluster",
              "FaultCode": "Fault Code",
              "FaultTime": "",
              "HawkeyeRCAs": "",
              "HoursWithFault": "Hours with Fault",
              "IsOutOfService": "IsNodeOOS",
              "NodeAvailabilityState": "Node Availability State",
              "NodeId": "Node ID",
              "NodeState": "Node State",
              "Nodes": "# Nodes",
              "ObservationStatus": "",
              "ObservationType": "Observation Type",
              "Platform": "Platform",
              "RackID": "Rack ID",
              "Tenant": "Cluster",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Nodes In Service(NIS)"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "from": 0,
                      "result": {
                        "color": "red",
                        "index": 0
                      },
                      "to": 95
                    },
                    "type": "range"
                  },
                  {
                    "options": {
                      "from": 95,
                      "result": {
                        "color": "green",
                        "index": 1
                      },
                      "to": 100
                    },
                    "type": "range"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SLA Status"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "At Risk": {
                        "color": "red",
                        "index": 1
                      },
                      "Healthy": {
                        "color": "green",
                        "index": 0
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Fault Description"
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 107
      },
      "id": 74,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "horizontal",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xField": "StateAggregate",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// DCM State Breakdown - Pivot clusters as columns, states as rows\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)  \r\n| where ClusterName in~ ($cluster);\r\n\r\ncluster('azuredcm.kusto.windows.net').database('AzureDCMDb').ResourceSnapshotV1\r\n| where PreciseTimeStamp > ago(1d)\r\n| where ResourceId in (nodes | project NodeId)\r\n| summarize arg_max(PreciseTimeStamp, *) by ResourceId\r\n| extend StateAggregate = iff(LifecycleState == \"Unavailable\", \"Unavailable [SoC OOS]\", LifecycleState)\r\n| summarize Count = count() by Tenant, StateAggregate\r\n| evaluate pivot(Tenant, sum(Count))",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "DCM Blade State Breakdown - Node Counts by Cluster",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "StateAggregate"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Rank": true,
              "ResourceListStr": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "CleanedReason": 3,
              "EscalateTo": 5,
              "FaultCode": 2,
              "HawkeyeRCAs": 4,
              "NodeListStr": 7,
              "NodeStatesStr": 6,
              "Nodes": 1,
              "Platform": 0
            },
            "renameByName": {
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SourceTeam": "Source Team",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "barchart"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Nodes In Service(NIS)"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "from": 0,
                      "result": {
                        "color": "red",
                        "index": 0
                      },
                      "to": 95
                    },
                    "type": "range"
                  },
                  {
                    "options": {
                      "from": 95,
                      "result": {
                        "color": "green",
                        "index": 1
                      },
                      "to": 100
                    },
                    "type": "range"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SLA Status"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "At Risk": {
                        "color": "red",
                        "index": 1
                      },
                      "Healthy": {
                        "color": "green",
                        "index": 0
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Fault Description"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 204
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 116
      },
      "id": 69,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// DCM Blade Fault Code Table by Platform - Fixed ResourceId mapping with TOP N\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\n\r\n// Get platform mapping from snapshot\r\nlet platform_mapping = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where $__timeFilter(SnapshotTime)\r\n| where Region in~ ($region)\r\n| where Platform in~ ($platform)\r\n| where Customer in~ ($customer)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| project NodeId, Platform;\r\n\r\n// Get node inventory to map NodeId to DCM ResourceIds (BladeId/SoCId)\r\nlet node_to_dcm_mapping = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster)\r\n| project NodeId, BladeId, SoCId\r\n| mv-expand ResourceId = pack_array(BladeId, SoCId) to typeof(string)\r\n| where isnotempty(ResourceId);\r\n\r\n// Combine platform info with DCM resource mapping\r\nlet platform_to_dcm_mapping = platform_mapping\r\n| join kind=inner node_to_dcm_mapping on NodeId\r\n| project ResourceId, Platform;\r\n\r\ncluster('azuredcm.kusto.windows.net').database('AzureDCMDb').ResourceSnapshotV1\r\n| where PreciseTimeStamp between (_startTime .. _endTime)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| where Region in~ ($region)\r\n| where CloudName == \"Public\"\r\n| summarize arg_max(PreciseTimeStamp, *) by ResourceId\r\n| where FaultCode > 0\r\n| join kind=inner platform_to_dcm_mapping on ResourceId\r\n| extend FaultCategory = case(\r\n    FaultCode between (0 .. 9999), \"Auto-generated OFR by FC\",\r\n    FaultCode between (10000 .. 19999), \"Auto-generated HI by FC\", \r\n    FaultCode between (20000 .. 29999), \"Internal Investigation\",\r\n    FaultCode == 30151, \"Internal RCA - Reboots/Bugchecks\",\r\n    FaultCode between (32000 .. 32999), \"Internal RCA - CSI Reserved\",\r\n    FaultCode between (34401 .. 34499), \"Internal RCA - Bugcheck\",\r\n    FaultCode between (60000 .. 60999), \"Hardware RMA\",\r\n    FaultCode between (61000 .. 61999), \"Vendor Attention\",\r\n    FaultCode between (62000 .. 62999), \"CSI Diag RMA\",\r\n    FaultCode between (63000 .. 63999), \"Non-CSI Diag RMA\",\r\n    FaultCode between (70000 .. 70009), \"Repeat Failer\",\r\n    FaultCode > 70009, \"Special Fault Codes\",\r\n    \"Unknown\"\r\n)\r\n| summarize \r\n    FaultCount = dcount(ResourceId),\r\n    TotalOccurrences = count(),\r\n    SampleFaultDescription = take_any(FaultDescription),\r\n    ResourceList = make_set(ResourceId)\r\n    by Platform, FaultCode, FaultCategory\r\n| partition by Platform (sort by FaultCount desc | take $top_n_faults)  // CHANGED FROM 10 TO $top_n_faults\r\n| join kind=leftouter (\r\n    cluster('hqse.kusto.windows.net').database('hqsedb').external_table('MoAD_RedlineFaultCodes')\r\n    | project FaultCode, SP3FaultReason, SourceTeam, SMETeam\r\n) on FaultCode\r\n| extend ResourceListStr = strcat_array(ResourceList, \"; \")\r\n| project Platform, FaultCode, FaultCount, FaultCategory, SampleFaultDescription, SP3FaultReason, SourceTeam, SMETeam, ResourceListStr\r\n| sort by Platform, FaultCount desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Top $top_n_faults DCM Faults by Fault Code per Platform",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "FaultCount"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "FaultCategory": true,
              "Rank": true,
              "ResourceListStr": true,
              "SampleFaultDescription": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "FaultCategory": 3,
              "FaultCode": 2,
              "FaultCount": 1,
              "Platform": 0,
              "ResourceListStr": 8,
              "SMETeam": 7,
              "SP3FaultReason": 4,
              "SampleFaultDescription": 5,
              "SourceTeam": 6
            },
            "renameByName": {
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Nodes",
              "FaultDescription": "Fault Description",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SourceTeam": "Source Team",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Nodes In Service(NIS)"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "from": 0,
                      "result": {
                        "color": "red",
                        "index": 0
                      },
                      "to": 95
                    },
                    "type": "range"
                  },
                  {
                    "options": {
                      "from": 95,
                      "result": {
                        "color": "green",
                        "index": 1
                      },
                      "to": 100
                    },
                    "type": "range"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SLA Status"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "At Risk": {
                        "color": "red",
                        "index": 1
                      },
                      "Healthy": {
                        "color": "green",
                        "index": 0
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Fault Description"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 204
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 125
      },
      "id": 70,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// SoC Fault Code Table by Platform - Use capacity table for platform mapping with TOP N\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\n\r\n// Get SoC names from node inventory\r\nlet soc_names = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster)\r\n| where isnotempty(SoCName)\r\n| project NodeId, SoCName;\r\n\r\n// Get platform mapping from capacity table\r\nlet platform_mapping = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where $__timeFilter(SnapshotTime)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| project NodeId, Platform;\r\n\r\n// Combine to get SoC-to-Platform mapping\r\nlet soc_platform_mapping = soc_names\r\n| join kind=leftouter platform_mapping on NodeId\r\n| extend Platform = coalesce(Platform, \"Unknown\")\r\n| project SoCName, Platform;\r\n\r\ncluster('azuredcm.kusto.windows.net').database('AzureDCMDb').ResourceSnapshotV1\r\n| where Name in (soc_names | project SoCName)\r\n| summarize arg_max(PreciseTimeStamp, *) by ResourceId\r\n| where FaultCode > 0\r\n// Join with platform mapping AFTER processing\r\n| join kind=leftouter soc_platform_mapping on $left.Name == $right.SoCName\r\n| extend Platform = coalesce(Platform, \"Unknown\")\r\n| extend FaultCategory = case(\r\n    FaultCode between (0 .. 9999), \"Auto-generated OFR by FC\",\r\n    FaultCode between (10000 .. 19999), \"Auto-generated HI by FC\", \r\n    FaultCode between (20000 .. 29999), \"Internal Investigation\",\r\n    FaultCode == 30151, \"Internal RCA - Reboots/Bugchecks\",\r\n    FaultCode between (32000 .. 32999), \"Internal RCA - CSI Reserved\",\r\n    FaultCode between (34401 .. 34499), \"Internal RCA - Bugcheck\",\r\n    FaultCode between (60000 .. 60999), \"Hardware RMA\",\r\n    FaultCode between (61000 .. 61999), \"Vendor Attention\",\r\n    FaultCode between (62000 .. 62999), \"CSI Diag RMA\",\r\n    FaultCode between (63000 .. 63999), \"Non-CSI Diag RMA\",\r\n    FaultCode between (70000 .. 70009), \"Repeat Failer\",\r\n    FaultCode > 70009, \"Special Fault Codes\",\r\n    \"Unknown\"\r\n)\r\n| summarize \r\n    SoCs = count(),\r\n    SoCList = make_set(Name),\r\n    SampleFaultDescription = take_any(FaultDescription)\r\n    by Platform, FaultCode, FaultCategory\r\n| partition by Platform (sort by SoCs desc | take $top_n_faults)  // TOP N PER PLATFORM\r\n| join kind = leftouter (cluster('hqse.kusto.windows.net').database('hqsedb').external_table('MoAD_RedlineFaultCodes')\r\n    | project FaultCode, SP3FaultReason, SourceTeam, SMETeam\r\n) on FaultCode\r\n| extend SoCListStr = strcat_array(SoCList, \"; \")\r\n| project Platform, FaultCode, SoCs, FaultCategory, SampleFaultDescription, SP3FaultReason, SourceTeam, SMETeam, SoCListStr\r\n| sort by Platform, SoCs desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Top $top_n_faults SoC Faults by Fault Code per Platform",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "FaultCount"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "FaultCategory": true,
              "Rank": true,
              "ResourceListStr": true,
              "SampleFaultDescription": true,
              "SoCListStr": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "FaultCategory": 3,
              "FaultCode": 2,
              "Platform": 0,
              "SMETeam": 7,
              "SP3FaultReason": 4,
              "SampleFaultDescription": 5,
              "SoCListStr": 8,
              "SoCs": 1,
              "SourceTeam": 6
            },
            "renameByName": {
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Nodes",
              "FaultDescription": "Fault Description",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SourceTeam": "Source Team",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto",
              "wrapText": false
            },
            "filterable": true,
            "inspect": true
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Blade ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Node View",
                    "url": "/d/cemixfipo7hfkanode/node-view?orgId=1&from=${__from}&to=${__to}&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Blade ID\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg SM Utilization"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 134
      },
      "id": 72,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// Blade & SoC Latest DCM States with Fault Details - ResourceSnapshotV1 Dump with Platform and Lifecycles\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\n\r\n// Get filtered node inventory with platform mapping\r\nlet nodes_with_platform = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster)\r\n| join kind=leftouter (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where $__timeFilter(SnapshotTime)\r\n    | where substring(Tenant, 0, 3) in ($datacenter)\r\n    | where Tenant in~ ($cluster)\r\n    | summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n    | project NodeId, Platform, RackID\r\n) on NodeId\r\n| extend Platform = coalesce(Platform, \"Unknown\");\r\n\r\n// Get SoC information with fault details\r\nlet soc_info = cluster('azuredcm.kusto.windows.net').database('AzureDCMDb').ResourceSnapshotV1\r\n| where ResourceId in (nodes_with_platform | project SoCId)\r\n| summarize arg_max(PreciseTimeStamp, *) by ResourceId\r\n| join nodes_with_platform on $left.ResourceId == $right.SoCId\r\n| project FullyQualifiedRackLocation, SoC_PreciseTimeStamp = PreciseTimeStamp, Tenant, BladeId, SoCID = ResourceId, SoC_LifecycleState = LifecycleState, SoC_OSType = OSType, SoC_FaultCode = FaultCode, SoC_FaultDescription = FaultDescription, NodeId, Platform, RackID\r\n| join kind = leftouter (cluster('hqse.kusto.windows.net').database('hqsedb').external_table('MoAD_RedlineFaultCodes')\r\n    | project FaultCode, SoC_FaultReason = SP3FaultReason, SoC_FaultSourceTeam = SourceTeam, SoC_FaultSMETeam = SMETeam\r\n) on $left.SoC_FaultCode == $right.FaultCode\r\n| project-away FaultCode;\r\n\r\n// Get Blade information with fault details\r\nlet blade_info = cluster('azuredcm.kusto.windows.net').database('AzureDCMDb').ResourceSnapshotV1\r\n| where ResourceId in (nodes_with_platform | project BladeId)\r\n| summarize arg_max(PreciseTimeStamp, *) by ResourceId\r\n| project Blade_PreciseTimeStamp = PreciseTimeStamp, Tenant, BladeId = ResourceId, Blade_LifecycleState = LifecycleState, Blade_OSType = OSType, Blade_FaultCode = FaultCode, Blade_FaultDescription = FaultDescription\r\n| join kind = leftouter (cluster('hqse.kusto.windows.net').database('hqsedb').external_table('MoAD_RedlineFaultCodes')\r\n    | project FaultCode, Blade_FaultReason = SP3FaultReason, Blade_FaultSourceTeam = SourceTeam, Blade_FaultSMETeam = SMETeam\r\n) on $left.Blade_FaultCode == $right.FaultCode\r\n| project-away FaultCode;\r\n\r\n// Join SoC and Blade information - Platform already included in soc_info\r\nsoc_info\r\n| join kind = inner (blade_info) on BladeId\r\n| project-away *1\r\n| project-reorder \r\n    Platform, \r\n    NodeId, \r\n    RackID,\r\n    Tenant,                    // Added Tenant column\r\n    Blade_LifecycleState,      // Added Blade LifecycleState column  \r\n    SoC_LifecycleState,        // Added SoC LifecycleState column\r\n    FullyQualifiedRackLocation, \r\n    BladeId, \r\n    SoCID, \r\n    Blade_FaultCode, \r\n    Blade_FaultDescription, \r\n    Blade_FaultReason, \r\n    SoC_FaultCode, \r\n    SoC_FaultDescription, \r\n    SoC_FaultReason, \r\n    SoC_OSType, \r\n    Blade_OSType, \r\n    SoC_FaultSourceTeam, \r\n    Blade_FaultSourceTeam, \r\n    SoC_FaultSMETeam, \r\n    Blade_FaultSMETeam, \r\n    SoC_PreciseTimeStamp, \r\n    Blade_PreciseTimeStamp",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Blade & SoC Latest DCM States with Fault Details ",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Blade_FaultDescription": true,
              "Blade_FaultSourceTeam": true,
              "Blade_LifecycleState": false,
              "Blade_OSType": true,
              "Blade_PreciseTimeStamp": true,
              "EscalateTo": true,
              "FullyQualifiedRackLocation": true,
              "HawkeyeRCA": true,
              "HawkeyeRCAs": true,
              "NodeId": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Nodes": false,
              "ObservationStatus": true,
              "SampleReason": true,
              "SoCListStr": true,
              "SoC_FaultDescription": true,
              "SoC_FaultSourceTeam": true,
              "SoC_LifecycleState": false,
              "SoC_OSType": true,
              "SoC_PreciseTimeStamp": true,
              "SourceTeam": true,
              "Tenant": false,
              "TotalObservations": true
            },
            "includeByName": {},
            "indexByName": {
              "BladeId": 4,
              "Blade_FaultCode": 9,
              "Blade_FaultDescription": 10,
              "Blade_FaultReason": 11,
              "Blade_FaultSMETeam": 19,
              "Blade_FaultSourceTeam": 18,
              "Blade_LifecycleState": 6,
              "Blade_OSType": 16,
              "Blade_PreciseTimeStamp": 22,
              "FullyQualifiedRackLocation": 8,
              "NodeId": 0,
              "Platform": 1,
              "RackID": 3,
              "SoCID": 5,
              "SoC_FaultCode": 12,
              "SoC_FaultDescription": 13,
              "SoC_FaultReason": 14,
              "SoC_FaultSMETeam": 20,
              "SoC_FaultSourceTeam": 17,
              "SoC_LifecycleState": 7,
              "SoC_OSType": 15,
              "SoC_PreciseTimeStamp": 21,
              "Tenant": 2
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "BladeId": "Blade ID",
              "Blade_FaultCode": "Blade Fault Code",
              "Blade_FaultDescription": "",
              "Blade_FaultReason": "Blade Fault Reason",
              "Blade_FaultSMETeam": "Blade SME Team",
              "Blade_LifecycleState": "Blade State",
              "CleanedReason": "Cleaned Reason",
              "Cluster": "Cluster",
              "FaultCode": "Fault Code",
              "HawkeyeRCAs": "",
              "NodeId": "Node ID",
              "Nodes": "# Nodes",
              "ObservationStatus": "",
              "ObservationType": "Observation Type",
              "RackID": "Rack ID",
              "SoCID": "SOC ID",
              "SoC_FaultCode": "SoC Fault Code",
              "SoC_FaultReason": "SoC Fault Reason",
              "SoC_FaultSMETeam": "SoC SME Team",
              "SoC_LifecycleState": "SoC State",
              "Tenant": "Cluster",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": true
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Node View",
                    "url": "/d/cemixfipo7hfkanode/node-view?orgId=1&from=${__from}&to=${__to}&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node ID\"]}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 142
      },
      "id": 43,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// GPU throttle events table\r\ncluster('sparkle.eastus').database('defaultdb').RackTelemetryGPURedfishAlertsFull\r\n| where $__timeFilter(EventTimeStamp)\r\n| where substring(Environment, 0, 3) in ($datacenter)  // Filter by datacenter\r\n| where Environment in ($cluster)\r\n| where ResourceId in (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n    | where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster)\r\n    | distinct NodeId\r\n)\r\n| where FaultReason contains \"SWPowerCap\" or FaultReason contains \"Throttle\" or FaultReason contains \"Thermal\"\r\n| extend ThrottleType = case(\r\n    FaultReason contains \"SWPowerCap\", \"Power Cap\",\r\n    FaultReason contains \"Thermal\", \"Thermal\",\r\n    FaultReason contains \"TEMP\", \"Temperature\",\r\n    \"Other Throttle\"\r\n)\r\n| extend IsSWPowerCap = iff(FaultReason endswith \"SWPowerCap\", \"Alert\", \"Throttle\")\r\n| summarize \r\n    ThrottleEvents = count(),\r\n    LastEvent = max(EventTimeStamp),\r\n    Severities = strcat_array(make_set(Severity), \", \"),\r\n    ThrottleTypes = strcat_array(make_set(ThrottleType), \", \")\r\n    by NodeId = ResourceId, ComponentId\r\n| join kind=leftouter (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n    | where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster)\r\n    | distinct NodeId, Tenant, Platform, RackID\r\n) on NodeId\r\n| project \r\n    NodeId,\r\n    Platform,\r\n    RackID,\r\n    Cluster = Tenant,\r\n    ComponentId,\r\n    ThrottleEvents,\r\n    ThrottleTypes,\r\n    Severities,\r\n    LastEvent\r\n| order by ThrottleEvents desc\r\n\r\n\r\n\r\n// // GPU throttle events analysis - based on GB200RedfishAlerts pattern\r\n// cluster('sparkle.eastus').database('defaultdb').RackTelemetryGPURedfishAlertsFull\r\n// | where $__timeFilter(EventTimeStamp)\r\n// // Filter for throttling-related events (keep SWPowerCap unlike the inspiration query)\r\n// | where FaultReason contains \"SWPowerCap\" or FaultReason contains \"Throttle\" or FaultReason contains \"Thermal\"\r\n// | where isnotempty(ComponentId) and isnotempty(FaultReason)\r\n// // Include all severities for throttling (Critical, Warning, OK) since throttling can be informational\r\n// | where Severity in ('Critical', 'Warning', 'OK')\r\n// // Filter by ResourceId for your cluster nodes\r\n// | where ResourceId in (\r\n//     cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n//     | where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n//     | where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster)\r\n//     | distinct NodeId\r\n// )\r\n// // Extract error counts if present in FaultReason\r\n// | extend ErrorCount = toint(extract(@' (\\d+)', 1, FaultReason))\r\n// | extend ErrorCount = iff(isnotempty(ErrorCount), toint(ErrorCount), 0)\r\n// // Clean up FaultReason similar to inspiration query\r\n// | extend CleanedFaultReason = FaultReason\r\n// | extend CleanedFaultReason = replace_regex(CleanedFaultReason, @'\\[.*?\\]', '')  // Remove square brackets\r\n// | extend CleanedFaultReason = replace_regex(CleanedFaultReason, @'\\{.*?\\}', '')  // Remove curly braces\r\n// | extend CleanedFaultReason = replace_regex(CleanedFaultReason, @'\\(.*?\\)', '') // Remove parentheses\r\n// | extend CleanedFaultReason = trim_start(' ', CleanedFaultReason)  // Remove leading whitespace\r\n// // Throttle-specific normalizations\r\n// | extend CleanedFaultReason = replace_regex(CleanedFaultReason, @'^.*SWPowerCap.*', 'Software Power Cap')\r\n// | extend CleanedFaultReason = replace_regex(CleanedFaultReason, @'^.*Thermal.*Throttle.*', 'Thermal Throttle')\r\n// | extend CleanedFaultReason = replace_regex(CleanedFaultReason, @'^.*Performance.*Throttled.*', 'Performance Throttle')\r\n// | extend CleanedFaultReason = replace_regex(CleanedFaultReason, @'^.*Temperature.*', 'Temperature Alert')\r\n// // Extract component type like the inspiration query\r\n// | extend ComponentType = substring(ComponentId, 0, indexof(ComponentId, '_'))\r\n// | extend ComponentType = replace_regex(ComponentType, @'(\\d+)', @'')  // Remove numbers\r\n// | extend ComponentType = iff(isempty(ComponentType), substring(ComponentId, 0, indexof(ComponentId, ' ')), ComponentType)\r\n// | extend ComponentType = iff(isempty(ComponentType), ComponentId, ComponentType)\r\n// // Classify throttle state and severity impact\r\n// | extend ThrottleState = case(\r\n//     FaultReason contains \"Throttled\", \"Currently Throttled\",\r\n//     FaultReason contains \"Normal\", \"Returned to Normal\", \r\n//     \"Active\"\r\n// )\r\n// | extend SeverityImpact = case(\r\n//     Severity == \"Critical\", \"Critical Impact\",\r\n//     Severity == \"Warning\", \"Warning Level\",\r\n//     Severity == \"OK\", \"Informational\",\r\n//     \"Unknown\"\r\n// )\r\n// // Use NodeId like inspiration query\r\n// | extend NodeId = iff(isnotempty(NodeId), NodeId, ResourceId)\r\n// | extend LastRefreshTime = now()\r\n// // Summarize by node and component type\r\n// | summarize \r\n//     ThrottleEvents = count(),\r\n//     FirstEvent = min(EventTimeStamp),\r\n//     LastEvent = max(EventTimeStamp),\r\n//     CleanedReasons = strcat_array(make_set(CleanedFaultReason), \", \"),\r\n//     ComponentTypes = strcat_array(make_set(ComponentType), \", \"),\r\n//     ThrottleStates = strcat_array(make_set(ThrottleState), \", \"),\r\n//     SeverityImpacts = strcat_array(make_set(SeverityImpact), \", \"),\r\n//     CriticalEvents = countif(Severity == \"Critical\"),\r\n//     WarningEvents = countif(Severity == \"Warning\"),\r\n//     InfoEvents = countif(Severity == \"OK\"),\r\n//     TotalErrorCount = sum(ErrorCount)\r\n//     by NodeId, Environment = coalesce(Environment, \"Unknown\")\r\n// // Get platform info\r\n// | join kind=leftouter (\r\n//     cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n//     | where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n//     | where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster)\r\n//     | summarize arg_max(TimeWindowStart, *) by NodeId\r\n//     | project NodeId, Tenant, Platform, Sku\r\n// ) on NodeId\r\n// // Calculate final metrics\r\n// | extend \r\n//     Platform = coalesce(Platform, \"Unknown\"),\r\n//     Cluster = coalesce(Tenant, Environment),\r\n//     Sku = coalesce(Sku, \"Unknown\"),\r\n//     ThrottleDurationHours = round(datetime_diff('hour', LastEvent, FirstEvent), 2),\r\n//     IsOngoing = iff(ThrottleStates contains \"Currently Throttled\", \"YES\", \"NO\"),\r\n//     HasCriticalThrottling = iff(CriticalEvents > 0, \"YES\", \"NO\"),\r\n//     PrimaryImpact = case(\r\n//         CriticalEvents > 0, \"Critical\",\r\n//         WarningEvents > 0, \"Warning\", \r\n//         \"Informational\"\r\n//     ),\r\n//     LastRefreshTime = now()\r\n// | project \r\n//     NodeId,\r\n//     Platform,\r\n//     Sku,\r\n//     Cluster,\r\n//     Environment,\r\n//     ThrottleEvents,\r\n//     PrimaryImpact,\r\n//     HasCriticalThrottling,\r\n//     CleanedReasons,\r\n//     ComponentTypes,\r\n//     ThrottleStates,\r\n//     ThrottleDurationHours,\r\n//     IsOngoing,\r\n//     CriticalEvents,\r\n//     WarningEvents,\r\n//     InfoEvents,\r\n//     TotalErrorCount,\r\n//     FirstEvent,\r\n//     LastEvent,\r\n//     LastRefreshTime\r\n// | order by CriticalEvents desc, WarningEvents desc, ThrottleEvents desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "SCHIE Redfish Throttle Alerts",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Cluster": false,
              "Severities": false
            },
            "includeByName": {},
            "indexByName": {
              "Cluster": 2,
              "ComponentId": 5,
              "LastEvent": 0,
              "NodeId": 4,
              "Platform": 1,
              "RackID": 3,
              "Severities": 6,
              "ThrottleEvents": 7,
              "ThrottleTypes": 8
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "Cluster": "Cluster",
              "LastEvent": "Last Event",
              "NodeId": "Node ID",
              "RackID": "Rack ID",
              "Severities": "Severity",
              "ThrottleEvents": "Events",
              "ThrottleTypes": "Throttle Type",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": true
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node Id"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "https://dagraf-mscycle-f4gdf7fgdtfac4ft.eus2.grafana.azure.com/d/cemixfipo7hfkanode/node-view?orgId=1&from=now-24h&to=now&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node Id\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg SM Utilization"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 150
      },
      "id": 50,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('hpcguesthealthsignals.eastus.kusto.windows.net').database('guesthealthreporting-telemetry').VmRequestDetails\r\n| where $__timeFilter(PreciseTimestamp)\r\n| where ObservationStatus != \"Healthy\"\r\n| join kind=inner (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n    | where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster)\r\n    | summarize arg_max(SnapshotTime, Platform) by NodeId\r\n) on NodeId\r\n| summarize \r\n    IssueCount = dcount(NodeId),\r\n    TotalObservations = count(),\r\n    SampleReason = take_any(RmaReason)\r\n    by Platform, ObservationType, ObservationStatus\r\n| partition by Platform (sort by IssueCount desc)\r\n| sort by Platform, IssueCount desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "GHR Summary by Observation Type - Time Range",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "ObservationStatus": true,
              "SampleReason": true,
              "TotalObservations": true
            },
            "includeByName": {},
            "indexByName": {
              "ConnectionType": 6,
              "EndDevice": 1,
              "EndLogicalPort": 5,
              "EndPort": 3,
              "LinkFlaps": 7,
              "StartDevice": 0,
              "StartLogicalPort": 4,
              "StartPort": 2
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "Cluster": "Cluster",
              "NodeId": "Node Id",
              "ObservationStatus": "",
              "ObservationType": "Observation Type",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto",
              "wrapText": false
            },
            "filterable": true,
            "inspect": true
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Node View",
                    "url": "https://dagraf-mscycle-f4gdf7fgdtfac4ft.eus2.grafana.azure.com/d/cemixfipo7hfkanode/node-view?orgId=1&from=now-24h&to=now&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node ID\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg SM Utilization"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 158
      },
      "id": 58,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('hpcguesthealthsignals.eastus.kusto.windows.net').database('guesthealthreporting-telemetry').VmRequestDetails\r\n| where $__timeFilter(PreciseTimestamp)\r\n| where ObservationStatus != \"Healthy\"\r\n| join kind=inner (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n    | where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster)\r\n    | summarize arg_max(SnapshotTime, Platform, RackID, Tenant) by NodeId  // Include RackID here\r\n    | project NodeId, Platform, RackID, Tenant  // And project it here\r\n) on NodeId\r\n| project Platform, RackID, Tenant, NodeId, RmaReason, ObservationType\r\n// | summarize \r\n//     IssueCount = dcount(NodeId),\r\n//     TotalObservations = count(),\r\n//     SampleReason = take_any(RmaReason)",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "GHR by Node Id - Time Range",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Severities": true
            },
            "includeByName": {},
            "indexByName": {
              "NodeId": 3,
              "ObservationType": 4,
              "Platform": 0,
              "RackID": 2,
              "RmaReason": 5,
              "Tenant": 1
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "Cluster": "Cluster",
              "NodeId": "Node ID",
              "ObservationType": "Observation Type",
              "RackID": "Rack ID",
              "RmaReason": "RMA Reason",
              "Tenant": "Cluster",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 166
      },
      "id": 75,
      "panels": [],
      "title": "GDCO Ticketing",
      "type": "row"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 167
      },
      "id": 76,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "horizontal",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xField": "State",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// GDCO Ticket Count Summary - Pivot clusters as columns, states as rows\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster);\r\n\r\ncluster('datagalaxy.westus3.kusto.windows.net').database('COIDG').TicketsSnapshot\r\n| where State !in (\"Canceled\")\r\n| where AssetName in (nodes | project NodeId)\r\n| summarize arg_max(AzureCreationDate, *) by TicketId\r\n| join kind = inner nodes on $left.AssetName == $right.NodeId\r\n| summarize Count = count() by ClusterName, State\r\n| evaluate pivot(ClusterName, sum(Count))",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "GDCO Tickets by State - Count by Cluster",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "StateAggregate"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Rank": true,
              "ResourceListStr": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "CleanedReason": 3,
              "EscalateTo": 5,
              "FaultCode": 2,
              "HawkeyeRCAs": 4,
              "NodeListStr": 7,
              "NodeStatesStr": 6,
              "Nodes": 1,
              "Platform": 0
            },
            "renameByName": {
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SourceTeam": "Source Team",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "barchart"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 0,
        "y": 176
      },
      "id": 77,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// GDCO Resolved Tickets Summary by Fault Reason - Use Grafana time range and filters\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster);\r\n\r\ncluster('datagalaxy.westus3.kusto.windows.net').database('COIDG').TicketsSnapshot\r\n//| where $__timeFilter(ChangedDate)\r\n| where AssetName in (nodes | project NodeId)\r\n| summarize arg_max(AzureCreationDate, *) by TicketId\r\n| where State == \"Resolved\"\r\n| summarize ResolvedTickets = count() by FaultReason\r\n| order by ResolvedTickets desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Resolved GDCO Tickets by Fault Reason Summary",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "StateAggregate"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Rank": true,
              "Reason": true,
              "ResourceListStr": true,
              "SerialNumber": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "AssetName": 0,
              "AzureCreationDate": 6,
              "FaultCode": 3,
              "FaultReason": 4,
              "Reason": 5,
              "ResolvedDate": 7,
              "RmaComments": 8,
              "SerialNumber": 9,
              "State": 2,
              "TicketId": 1,
              "TicketLink": 10
            },
            "renameByName": {
              "AssetName": "Asset Name",
              "AzureCreationDate": "Creation Date",
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "FaultReason": "Fault Reason",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "ResolvedDate": "Resolved Date",
              "ResolvedTickets": "Resolved Tickets",
              "RmaComments": "RMA Comments",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SerialNumber": "",
              "SourceTeam": "Source Team",
              "TicketId": "Ticket Id",
              "TicketLink": "Ticket Link",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 12,
        "y": 176
      },
      "id": 81,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// GDCO Open Tickets Summary by Fault Reason - Use Grafana filters\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster);\r\n\r\ncluster('datagalaxy.westus3.kusto.windows.net').database('COIDG').TicketsSnapshot\r\n| where State !in (\"Resolved\", \"Canceled\")\r\n| where AssetName in (nodes | project NodeId)\r\n| summarize arg_max(AzureCreationDate, *) by TicketId\r\n| summarize OpenTickets = count() by FaultReason\r\n| order by OpenTickets desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Open GDCO Tickets by Fault Reason Summary",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "StateAggregate"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Rank": true,
              "Reason": true,
              "ResourceListStr": true,
              "SerialNumber": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "AssetName": 0,
              "AzureCreationDate": 6,
              "FaultCode": 3,
              "FaultReason": 4,
              "Reason": 5,
              "ResolvedDate": 7,
              "RmaComments": 8,
              "SerialNumber": 9,
              "State": 2,
              "TicketId": 1,
              "TicketLink": 10
            },
            "renameByName": {
              "AssetName": "Asset Name",
              "AzureCreationDate": "Creation Date",
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "FaultReason": "Fault Reason",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "OpenTickets": "Open Tickets",
              "ResolvedDate": "Resolved Date",
              "ResolvedTickets": "Resolved Tickets",
              "RmaComments": "RMA Comments",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SerialNumber": "",
              "SourceTeam": "Source Team",
              "TicketId": "Ticket Id",
              "TicketLink": "Ticket Link",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Resource ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Node View",
                    "url": "/d/cemixfipo7hfkanode/node-view?orgId=1&from=${__from}&to=${__to}&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Resource ID\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ticket Link"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "ticket link",
                    "url": "${__value.raw}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 181
      },
      "id": 80,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// GDCO Resolved Tickets with Platform and Cluster - Use Grafana time range and filters\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster);\r\n\r\n// Get platform mapping\r\nlet platform_mapping = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where $__timeFilter(SnapshotTime)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| project NodeId, Platform, RackID;\r\n\r\ncluster('datagalaxy.westus3.kusto.windows.net').database('COIDG').TicketsSnapshot\r\n| where $__timeFilter(ChangedDate)\r\n| where AssetName in (nodes | project NodeId)\r\n| summarize arg_max(AzureCreationDate, *) by TicketId\r\n| join kind=inner nodes on $left.AssetName == $right.NodeId\r\n| join kind=leftouter platform_mapping on $left.AssetName == $right.NodeId\r\n| extend Platform = coalesce(Platform, \"Unknown\")\r\n| project \r\n    Platform,\r\n    RackID,\r\n    Cluster = ClusterName,\r\n    AssetName, \r\n    TicketId, \r\n    FaultCode, \r\n    FaultReason, \r\n    State, \r\n    Reason, \r\n    AzureCreationDate, \r\n    ResolvedDate = ChangedDate, \r\n    RmaComments, \r\n    SerialNumber\r\n| extend TicketLink = strcat(\"https://gdcoapp.trafficmanager.net/tasks/details/\", TicketId)\r\n| order by ResolvedDate desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": " GDCO Tickets Log in Time Range",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "StateAggregate"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "Rank": true,
              "Reason": true,
              "ResolvedDate": true,
              "ResourceListStr": true,
              "SerialNumber": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "AssetName": 3,
              "AzureCreationDate": 9,
              "Cluster": 1,
              "FaultCode": 6,
              "FaultReason": 7,
              "Platform": 0,
              "RackID": 2,
              "Reason": 8,
              "ResolvedDate": 10,
              "RmaComments": 11,
              "SerialNumber": 12,
              "State": 5,
              "TicketId": 4,
              "TicketLink": 13
            },
            "renameByName": {
              "AssetName": "Resource ID",
              "AzureCreationDate": "Creation Date",
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "FaultReason": "Fault Reason",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "RackID": "Rack ID",
              "ResolvedDate": "Resolved Date",
              "RmaComments": "RMA Comments",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SerialNumber": "",
              "SourceTeam": "Source Team",
              "TicketId": "Ticket ID",
              "TicketLink": "Ticket Link",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Node View",
                    "url": "/d/cemixfipo7hfkanode/node-view?orgId=1&from=${__from}&to=${__to}&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node ID\"]}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 190
      },
      "id": 78,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// DCM OFR Nodes without GDCO Tickets with Platform - Use Grafana time range and filters\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster);\r\n\r\n// Get platform mapping\r\nlet platform_mapping = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where $__timeFilter(SnapshotTime)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| project NodeId, Platform, RackID;\r\n\r\n// Get DCM OFR nodes\r\nlet dcm_ofr_nodes = cluster('azuredcm.kusto.windows.net').database('AzureDCMDb').ResourceSnapshotV1\r\n| where PreciseTimeStamp > ago(2d)\r\n| where ResourceId in (nodes | project NodeId)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| where Region in~ ($region)\r\n| where CloudName == \"Public\"\r\n| summarize arg_max(PreciseTimeStamp, *) by ResourceId\r\n| where LifecycleState == \"OutForRepair\"\r\n| join kind=leftouter platform_mapping on $left.ResourceId == $right.NodeId\r\n| extend Platform = coalesce(Platform, \"Unknown\")\r\n| project ResourceId, LifecycleState, FaultCode, FaultDescription, Tenant, PreciseTimeStamp, Platform, RackID;\r\n\r\n// Get nodes with open GDCO tickets\r\nlet nodes_with_tickets = cluster('datagalaxy.westus3.kusto.windows.net').database('COIDG').TicketsSnapshot\r\n| where State !in (\"Resolved\", \"Canceled\")\r\n| where AssetName in (nodes | project NodeId)\r\n| summarize arg_max(AzureCreationDate, *) by TicketId\r\n| join kind = inner nodes on $left.AssetName == $right.NodeId\r\n| summarize by AssetName;\r\n\r\n// Find DCM OFR nodes WITHOUT open GDCO tickets\r\ndcm_ofr_nodes\r\n| join kind = leftanti nodes_with_tickets on $left.ResourceId == $right.AssetName\r\n| project \r\n    Platform,\r\n    RackID,\r\n    NodeId = ResourceId,\r\n    Tenant,\r\n    LifecycleState,\r\n    FaultCode,\r\n    FaultDescription,\r\n    OFR_Since = PreciseTimeStamp\r\n| order by Platform, OFR_Since desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Nodes in DCM OFR without GDCO Tickets",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "StateAggregate"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "OFR_Since": true,
              "Rank": true,
              "Reason": true,
              "ResourceListStr": true,
              "SerialNumber": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "FaultCode": 5,
              "FaultDescription": 6,
              "LifecycleState": 4,
              "NodeId": 3,
              "OFR_Since": 7,
              "Platform": 0,
              "RackID": 2,
              "Tenant": 1
            },
            "renameByName": {
              "AssetName": "Asset Name",
              "AzureCreationDate": "Creation Date",
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "FaultReason": "Fault Reason",
              "LifecycleState": "State",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "NodeId": "Node ID",
              "OFR_Since": "",
              "RackID": "Rack ID",
              "ResolvedDate": "Resolved Date",
              "RmaComments": "RMA Comments",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SerialNumber": "",
              "SourceTeam": "Source Team",
              "Tenant": "Cluster",
              "TicketId": "Ticket Id",
              "TicketLink": "Ticket Link",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Node View",
                    "url": "/d/cemixfipo7hfkanode/node-view?orgId=1&from=${__from}&to=${__to}&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node ID\"]}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 199
      },
      "id": 79,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "clusterUri": "https://sparkle.eastus.kusto.windows.net/",
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "5.1.1",
          "query": "// TM OFR Nodes without GDCO Tickets with Platform - Use Grafana time range and filters\r\nlet nodes = cluster('supermonkusto.eastus').database('MissionControl').GetNodeInventory\r\n| where substring(ClusterName, 0, 3) in ($datacenter)\r\n| where ClusterName in~ ($cluster);\r\n\r\n// Get platform mapping\r\nlet platform_mapping = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where $__timeFilter(SnapshotTime)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| summarize arg_max(TimeWindowStart, QueryTime, *) by NodeId\r\n| project NodeId, Platform, RackID;\r\n\r\n// Get TM OFR nodes\r\nlet tm_ofr_nodes = cluster('azurecm').database('AzureCM').LogNodeSnapshot\r\n| where nodeId in (nodes | project NodeId)\r\n| where PreciseTimeStamp > ago(2d)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| where Region in~ ($region)\r\n| where CloudName == \"Public\"\r\n| summarize arg_max(PreciseTimeStamp, *) by nodeId, hostName\r\n| where nodeState == \"OutForRepair\"\r\n| join kind=leftouter platform_mapping on $left.nodeId == $right.NodeId\r\n| extend Platform = coalesce(Platform, \"Unknown\")\r\n| project nodeId, hostName, Tenant, nodeState, nodeAvailabilityState, PreciseTimeStamp, faultInfo, Platform, RackID;\r\n\r\n// Get nodes with open GDCO tickets\r\nlet nodes_with_tickets = cluster('datagalaxy.westus3.kusto.windows.net').database('COIDG').TicketsSnapshot\r\n| where State !in (\"Resolved\", \"Canceled\")\r\n| where AssetName in (nodes | project NodeId)\r\n| summarize arg_max(AzureCreationDate, *) by TicketId\r\n| join kind = inner nodes on $left.AssetName == $right.NodeId\r\n| summarize by AssetName;\r\n\r\n// Find TM OFR nodes WITHOUT open GDCO tickets\r\ntm_ofr_nodes\r\n| join kind = leftanti nodes_with_tickets on $left.nodeId == $right.AssetName\r\n| project \r\n    Platform,\r\n    NodeId = nodeId,\r\n    RackID,\r\n    HostName = hostName,\r\n    Tenant,\r\n    NodeState = nodeState,\r\n    NodeAvailabilityState = nodeAvailabilityState,\r\n    OFR_Since = PreciseTimeStamp,\r\n    FaultInfo = faultInfo\r\n| order by Platform, OFR_Since desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Nodes in TM without GDCO Tickets",
      "transformations": [
        {
          "disabled": true,
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "StateAggregate"
              }
            ]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CleanedReason": false,
              "FaultCategory": true,
              "HawkeyeRCAs": true,
              "HostName": true,
              "NodeListStr": true,
              "NodeStatesStr": true,
              "OFR_Since": true,
              "Rank": true,
              "Reason": true,
              "ResourceListStr": true,
              "SerialNumber": true,
              "SourceTeam": true,
              "dummy": true
            },
            "includeByName": {},
            "indexByName": {
              "FaultInfo": 8,
              "HostName": 4,
              "NodeAvailabilityState": 6,
              "NodeId": 3,
              "NodeState": 5,
              "OFR_Since": 7,
              "Platform": 0,
              "RackID": 2,
              "Tenant": 1
            },
            "renameByName": {
              "AssetName": "Asset Name",
              "AzureCreationDate": "Creation Date",
              "FaultCategory": "Fault Category",
              "FaultCode": "Fault Code",
              "FaultCount": "Fault Count",
              "FaultDescription": "Fault Description",
              "FaultInfo": "Fault Description",
              "FaultReason": "Fault Reason",
              "MTRA": "",
              "NIS": "Nodes In Service(NIS)",
              "NodeAvailabilityState": "Availability State",
              "NodeId": "Node ID",
              "NodeState": "Node State",
              "RackID": "Rack ID",
              "ResolvedDate": "Resolved Date",
              "RmaComments": "RMA Comments",
              "SLAStatus": "SLA Status",
              "SMETeam": "SME Team",
              "SP3FaultReason": "Fault Reason",
              "SampleFaultDescription": "Fault Description",
              "SerialNumber": "",
              "SourceTeam": "Source Team",
              "Tenant": "Cluster",
              "TicketId": "Ticket Id",
              "TicketLink": "Ticket Link",
              "TotalOccurrences": "Total Occurences"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 208
      },
      "id": 53,
      "panels": [],
      "title": "GPU",
      "type": "row"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Average SM Utilization",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 209
      },
      "id": 46,
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "max",
            "min"
          ],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "let time_range_hours = datetime_diff('hour', $__timeTo(), $__timeFrom());\r\nlet bucket_size = case(\r\n    time_range_hours <= 48, 5m,      // Last 2 days: 5min buckets\r\n    time_range_hours <= 168, 15m,    // Last week: 15min buckets  \r\n    time_range_hours <= 720, 1h,     // Last month: 1hour buckets\r\n    4h                               // Longer periods: 4hour buckets\r\n);\r\n// Simple average SM utilization\r\nlet min_value = 0.0;\r\nlet max_value = 100.0;\r\n\r\ncluster('hpcfuntelemetry.eastus').database('H100Telemetry').H100Performance\r\n| where $__timeFilter(precise_timestamp)\r\n| where substring(cluster, 0, 3) in ($datacenter)\r\n| where cluster in ($cluster)\r\n| where util_sm between (min_value .. max_value)\r\n| extend TimeBucket = bin(precise_timestamp, bucket_size)\r\n| summarize avg_utilization = round(avg(util_sm), 2) by Time = TimeBucket\r\n| project Time, value = avg_utilization\r\n| order by Time asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": true,
          "pluginVersion": "6.0.1",
          "query": "// Use Grafana time range and filters\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\n\r\n// Determine bin size based on time range (same as Query A)\r\nlet binSize = case(\r\n    _endTime - _startTime <= 6h, 1m,\r\n    _endTime - _startTime <= 24h, 3m,\r\n    _endTime - _startTime <= 2d, 6m,\r\n    _endTime - _startTime <= 14d, 42m,\r\n    2h\r\n);\r\n\r\n// SM Log Volume - try direct syslog table access\r\ncluster('azurehpc-public.centralus.kusto.windows.net').database('hpcinterconnect').UnionOfAllLogs(\"syslog\", \"SyslogData_Mapped\")\r\n| where TimeGenerated between (_startTime .. _endTime)\r\n| where substring(Computer, 0, 3) in ($datacenter)  // Filter by datacenter\r\n| where Computer contains \"ufm\"  // UFM devices\r\n| where SyslogMessage contains \"OpenSM\"  // OpenSM log entries\r\n| extend TimeBucket = bin(TimeGenerated, binSize)\r\n| summarize OpenSM_LogCount = count() by TimeBucket\r\n| project Time = TimeBucket, value = OpenSM_LogCount\r\n| order by Time asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "B",
          "resultFormat": "table"
        }
      ],
      "title": "Average SM Utilization",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "# of GPUS",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 209
      },
      "id": 39,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "let time_range_hours = datetime_diff('hour', $__timeTo(), $__timeFrom());\r\nlet bucket_size = case(\r\n    time_range_hours <= 48, 5m,      // Last 2 days: 5min buckets\r\n    time_range_hours <= 168, 15m,    // Last week: 15min buckets  \r\n    time_range_hours <= 720, 1h,     // Last month: 1hour buckets\r\n    4h                               // Longer periods: 4hour buckets\r\n);\r\nlet min_value = 0.0;\r\nlet max_value = 100.0;\r\n\r\n// Get filtered nodes using your standard filters\r\nlet filtered_nodes = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in~ ($region)\r\n| where Platform in~ ($platform)\r\n| where Customer in~ ($customer)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| distinct NodeId;\r\n\r\n// Get GPU utilization data\r\nlet raw_data = cluster('hpcfuntelemetry.eastus').database('H100Telemetry').H100Performance\r\n| where node_id in (filtered_nodes) \r\n| where $__timeFilter(precise_timestamp)\r\n| extend GPUInstance = strcat(node_id, \" - \", gpu_index)\r\n| distinct node_id, precise_timestamp, cluster, util_sm, GPUInstance\r\n| summarize arg_max(util_sm, *) by GPUInstance, cluster, bin(precise_timestamp, bucket_size)\r\n| where util_sm between (min_value .. max_value);\r\n\r\n// Create time series with utilization buckets as separate series\r\nraw_data\r\n| extend UtilizationBucket = case(\r\n    util_sm < 20, \"0-20%\",\r\n    util_sm < 40, \"20-40%\", \r\n    util_sm < 60, \"40-60%\",\r\n    util_sm < 80, \"60-80%\",\r\n    util_sm <= 100, \"80-100%\",\r\n    \"Other\"\r\n)\r\n| summarize GPUCount = count() by Time = precise_timestamp, UtilizationBucket\r\n| project Time, UtilizationBucket, value = GPUCount\r\n| order by Time asc\r\n\r\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "time_series"
        }
      ],
      "title": "SM Utilization by GPU Count",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "UtilizationBucket"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "UtilizationBucket 1": "",
              "UtilizationBucket 2": "",
              "value 1": "",
              "value 2": "",
              "value 3": "40-60%",
              "value 4": "60-80%",
              "value 5": "80-100%"
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Average Temperature",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 217
      },
      "id": 44,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// Adjust bucket size based on time range\r\nlet time_range_hours = datetime_diff('hour', $__timeTo(), $__timeFrom());\r\nlet bucket_size = case(\r\n    time_range_hours <= 48, 5m,      // Last 2 days: 5min buckets\r\n    time_range_hours <= 168, 15m,    // Last week: 15min buckets  \r\n    time_range_hours <= 720, 1h,     // Last month: 1hour buckets\r\n    4h                               // Longer periods: 4hour buckets\r\n);\r\n\r\ncluster('sparkle.eastus').database('defaultdb').RackTelemetryGPUTelemetryFull\r\n| where $__timeFilter(TelemetryTimestamp)\r\n| where TelemetryName == \"GPU-TEMP-GB-GPU\"\r\n| where substring(Environment, 0, 3) in ($datacenter)\r\n| where Environment in ($cluster)\r\n| where TelemetryValue != \"\" and isnotempty(TelemetryValue)\r\n| extend TempValue = round(todouble(TelemetryValue), 2)\r\n| where isfinite(TempValue) and TempValue > 0\r\n| extend TimeBucket = bin(TelemetryTimestamp, bucket_size)  // Dynamic bucket size\r\n| summarize AvgTemperature = round(avg(TempValue), 2) by Time = TimeBucket\r\n| project Time, value = AvgTemperature\r\n| order by Time asc\r\n\r\n\r\n// // Average GPU temperature query\r\n// cluster('sparkle.eastus').database('defaultdb').RackTelemetryGPUTelemetryFull\r\n// | where $__timeFilter(TelemetryTimestamp)\r\n// | where TelemetryName == \"GPU-TEMP-GB-GPU\"\r\n// | where substring(Environment, 0, 3) in ($datacenter)\r\n// | where Environment in ($cluster)\r\n// | where TelemetryValue != \"\" and isnotempty(TelemetryValue)\r\n// | extend TempValue = round(todouble(TelemetryValue), 2)\r\n// | where isfinite(TempValue) and TempValue > 0  // Filter out invalid temperatures\r\n// | extend TimeBucket = bin(TelemetryTimestamp, 5m)  // 5-minute buckets like your inspiration\r\n// | summarize \r\n//     AvgTemperature = round(avg(TempValue), 2),\r\n//     MaxTemperature = round(max(TempValue), 2),\r\n//     MinTemperature = round(min(TempValue), 2),\r\n//     GPUCount = count()\r\n//     by Time = TimeBucket\r\n// | project Time, value = AvgTemperature  // For single series\r\n// | order by Time asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": true,
          "pluginVersion": "6.0.1",
          "query": "// Use Grafana time range and filters\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\n\r\n// Determine bin size based on time range (same as Query A)\r\nlet binSize = case(\r\n    _endTime - _startTime <= 6h, 1m,\r\n    _endTime - _startTime <= 24h, 3m,\r\n    _endTime - _startTime <= 2d, 6m,\r\n    _endTime - _startTime <= 14d, 42m,\r\n    2h\r\n);\r\n\r\n// SM Log Volume - try direct syslog table access\r\ncluster('azurehpc-public.centralus.kusto.windows.net').database('hpcinterconnect').UnionOfAllLogs(\"syslog\", \"SyslogData_Mapped\")\r\n| where TimeGenerated between (_startTime .. _endTime)\r\n| where substring(Computer, 0, 3) in ($datacenter)  // Filter by datacenter\r\n| where Computer contains \"ufm\"  // UFM devices\r\n| where SyslogMessage contains \"OpenSM\"  // OpenSM log entries\r\n| extend TimeBucket = bin(TimeGenerated, binSize)\r\n| summarize OpenSM_LogCount = count() by TimeBucket\r\n| project Time = TimeBucket, value = OpenSM_LogCount\r\n| order by Time asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "B",
          "resultFormat": "table"
        }
      ],
      "title": "Average GPU Temperature",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Average Power",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 217
      },
      "id": 45,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "let time_range_hours = datetime_diff('hour', $__timeTo(), $__timeFrom());\r\nlet bucket_size = case(\r\n    time_range_hours <= 48, 5m,      // Last 2 days: 5min buckets\r\n    time_range_hours <= 168, 15m,    // Last week: 15min buckets  \r\n    time_range_hours <= 720, 1h,     // Last month: 1hour buckets\r\n    4h                               // Longer periods: 4hour buckets\r\n);\r\n// Average GPU temperature query\r\ncluster('sparkle.eastus').database('defaultdb').RackTelemetryGPUTelemetryFull\r\n| where $__timeFilter(TelemetryTimestamp)\r\n| where TelemetryName == \"GPU-PWR-CURR\"\r\n| where substring(Environment, 0, 3) in ($datacenter)\r\n| where Environment in ($cluster)\r\n| where TelemetryValue != \"\" and isnotempty(TelemetryValue)\r\n| extend TempValue = round(todouble(TelemetryValue), 2)\r\n| where isfinite(TempValue) and TempValue > 0  // Filter out invalid temperatures\r\n| extend TimeBucket = bin(TelemetryTimestamp, bucket_size)  // 5-minute buckets like your inspiration\r\n| summarize \r\n    AvgTemperature = round(avg(TempValue), 2),\r\n    MaxTemperature = round(max(TempValue), 2),\r\n    MinTemperature = round(min(TempValue), 2),\r\n    GPUCount = count()\r\n    by Time = TimeBucket\r\n| project Time, value = AvgTemperature  // For single series\r\n| order by Time asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": true,
          "pluginVersion": "6.0.1",
          "query": "// Use Grafana time range and filters\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\n\r\n// Determine bin size based on time range (same as Query A)\r\nlet binSize = case(\r\n    _endTime - _startTime <= 6h, 1m,\r\n    _endTime - _startTime <= 24h, 3m,\r\n    _endTime - _startTime <= 2d, 6m,\r\n    _endTime - _startTime <= 14d, 42m,\r\n    2h\r\n);\r\n\r\n// SM Log Volume - try direct syslog table access\r\ncluster('azurehpc-public.centralus.kusto.windows.net').database('hpcinterconnect').UnionOfAllLogs(\"syslog\", \"SyslogData_Mapped\")\r\n| where TimeGenerated between (_startTime .. _endTime)\r\n| where substring(Computer, 0, 3) in ($datacenter)  // Filter by datacenter\r\n| where Computer contains \"ufm\"  // UFM devices\r\n| where SyslogMessage contains \"OpenSM\"  // OpenSM log entries\r\n| extend TimeBucket = bin(TimeGenerated, binSize)\r\n| summarize OpenSM_LogCount = count() by TimeBucket\r\n| project Time = TimeBucket, value = OpenSM_LogCount\r\n| order by Time asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "B",
          "resultFormat": "table"
        }
      ],
      "title": "Average GPU Power Draw",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "left",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Node View",
                    "url": "https://dagraf-mscycle-f4gdf7fgdtfac4ft.eus2.grafana.azure.com/d/cemixfipo7hfkanode/node-view?orgId=1&from=now-24h&to=now&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node ID\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg SM Utilization"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 225
      },
      "id": 47,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// Simplest version\r\ncluster('hpcfuntelemetry.eastus').database('H100Telemetry').H100Performance\r\n| where $__timeFilter(precise_timestamp)\r\n| where substring(cluster, 0, 3) in ($datacenter) // Filter by datacenter directly\r\n| where cluster in ($cluster)\r\n| where util_sm between (0 .. 100)\r\n| summarize arg_max(precise_timestamp, *) by node_id  // Latest record per node\r\n| summarize AvgUtilization = avg(util_sm) by NodeId = node_id, Cluster = cluster, timestamp = precise_timestamp\r\n| join kind=leftouter (\r\n    cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n    | where Region in~ ($region) | where Platform in~ ($platform) | where Customer in~ ($customer)\r\n    | where substring(Tenant, 0, 3) in ($datacenter) | where Tenant in~ ($cluster)\r\n    | distinct NodeId, Tenant, Platform, RackID\r\n) on NodeId\r\n| project NodeId, Platform, RackID, Cluster, AvgUtilization,  timestamp\r\n| order by AvgUtilization desc\r\n\r\n// // Closest match to your original query structure\r\n// cluster('sparkle.eastus').database('defaultdb').RackTelemetryGPUTelemetryFull\r\n// | where $__timeFilter(TelemetryTimestamp)\r\n// | where TelemetryName == \"GPU-UTIL-SM\"\r\n// | where substring(Environment, 0, 3) in ($datacenter)\r\n// | where Environment in ($cluster)\r\n// | where TelemetryValue != \"\" and isnotempty(TelemetryValue)\r\n// | extend UtilValue = todouble(TelemetryValue)\r\n// | where UtilValue between (0 .. 100)\r\n// | summarize arg_max(TelemetryTimestamp, *) by ResourceId  // Latest record per node\r\n// | summarize AvgUtilization = round(avg(UtilValue), 2) by NodeId = ResourceId, Cluster = Environment, timestamp = TelemetryTimestamp\r\n// | project NodeId, Cluster, AvgUtilization, timestamp\r\n// | order by AvgUtilization desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "SM Utilization by Node (Last)",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "NodeId1": true,
              "Tenant": true
            },
            "includeByName": {},
            "indexByName": {
              "AvgUtilization": 5,
              "Cluster": 2,
              "NodeId": 4,
              "NodeId1": 6,
              "Platform": 1,
              "RackID": 3,
              "Tenant": 7,
              "timestamp": 0
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "Cluster": "Cluster",
              "NodeId": "Node ID",
              "RackID": "Rack ID",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 233
      },
      "id": 55,
      "panels": [],
      "title": "Infiniband",
      "type": "row"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "Gbits"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 234
      },
      "id": 17,
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "max",
            "min"
          ],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// Use Grafana time range and filters\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\n\r\n// Determine bin size based on time range\r\nlet binSize = case(\r\n    _endTime - _startTime <= 6h, 1m,\r\n    _endTime - _startTime <= 24h, 3m,\r\n    _endTime - _startTime <= 2d, 6m,\r\n    _endTime - _startTime <= 14d, 42m,\r\n    2h\r\n);\r\nlet window = binSize/1s;\r\n\r\n// Get clusters from your filters\r\nlet _clustersInFabric = cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in~ ($region)\r\n| where Platform in~ ($platform)\r\n| where Customer in~ ($customer)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| distinct Tenant;\r\n\r\n// HCA Traffic\r\ncluster('hpcfuntelemetry.eastus').database('HCATelemetry').Mlx5HpcTrafficCounters\r\n| where PreciseTimeStamp between (_startTime .. _endTime)\r\n| where Tenant in (_clustersInFabric)\r\n| extend TimeBucket = bin(RowTimeStamp, binSize)\r\n| summarize HCA_Throughput_Gbps = round(sum(Bytes_Sent)*8/(window*1e9), 2) by TimeBucket\r\n| project Time = TimeBucket, value = HCA_Throughput_Gbps\r\n| order by Time asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "OpenAI": false,
          "database": "blobstreamingdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": true,
          "pluginVersion": "6.0.1",
          "query": "// Use Grafana time range and filters\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\n\r\n// Determine bin size based on time range (same as Query A)\r\nlet binSize = case(\r\n    _endTime - _startTime <= 6h, 1m,\r\n    _endTime - _startTime <= 24h, 3m,\r\n    _endTime - _startTime <= 2d, 6m,\r\n    _endTime - _startTime <= 14d, 42m,\r\n    2h\r\n);\r\n\r\n// SM Log Volume - try direct syslog table access\r\ncluster('azurehpc-public.centralus.kusto.windows.net').database('hpcinterconnect').UnionOfAllLogs(\"syslog\", \"SyslogData_Mapped\")\r\n| where TimeGenerated between (_startTime .. _endTime)\r\n| where substring(Computer, 0, 3) in ($datacenter)  // Filter by datacenter\r\n| where Computer contains \"ufm\"  // UFM devices\r\n| where SyslogMessage contains \"OpenSM\"  // OpenSM log entries\r\n| extend TimeBucket = bin(TimeGenerated, binSize)\r\n| summarize OpenSM_LogCount = count() by TimeBucket\r\n| project Time = TimeBucket, value = OpenSM_LogCount\r\n| order by Time asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "B",
          "resultFormat": "table"
        }
      ],
      "title": "Aggregate HCA Traffic Egress",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node Id"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "https://dagraf-mscycle-f4gdf7fgdtfac4ft.eus2.grafana.azure.com/d/cemixfipo7hfkanode/node-view?orgId=1&from=now-24h&to=now&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node Id\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg SM Utilization"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 243
      },
      "id": 51,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "// Use Grafana time range and filters\r\nlet _endTime = $__timeTo();\r\nlet _startTime = $__timeFrom();\r\ncluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('NetworkHealth').table('MetricLinkFlap')\r\n    | where TimeStamp between (_startTime .. _endTime)\r\n    // | where Region in~ ($region)\r\n    // | where Platform in~ ($platform)\r\n    // | where Customer in~ ($customer)\r\n    | where substring(BackendFabric, 0, 3) in ($datacenter)\r\n    | where BackendFabric in~ ($cluster)\r\n    | summarize LinkFlaps = count() by StartDevice, StartPort, StartLogicalPort, EndDevice, EndPort, EndLogicalPort, ConnectionType\r\n    | sort by LinkFlaps desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Infinband Link Flapping",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "ConnectionType": 6,
              "EndDevice": 1,
              "EndLogicalPort": 5,
              "EndPort": 3,
              "LinkFlaps": 7,
              "StartDevice": 0,
              "StartLogicalPort": 4,
              "StartPort": 2
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "Cluster": "Cluster",
              "NodeId": "Node Id",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "fem88lm00ugowb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Node Id"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "https://dagraf-mscycle-f4gdf7fgdtfac4ft.eus2.grafana.azure.com/d/cemixfipo7hfkanode/node-view?orgId=1&from=now-24h&to=now&var-cluster=${__data.fields.Cluster}&var-node_id=${__data.fields[\"Node Id\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg SM Utilization"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 251
      },
      "id": 40,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "11.6.3",
      "targets": [
        {
          "OpenAI": false,
          "database": "defaultdb",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "fem88lm00ugowb"
          },
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('syslog').SwitchDown\r\n| where $__timeFilter(PreciseTimeStamp)\r\n| project PreciseTimeStamp, DeviceName=toupper(SourceName), LogType, LoggingDevice\r\n| summarize SwitchDownCount=count() by DeviceName\r\n| join kind=leftouter (\r\n    cluster('https://azurehpc-centralus.centralus.kusto.windows.net').database('syslog').DeviceMap \r\n    | project DeviceName, BackendFabric, Generation, OSVersion\r\n) on DeviceName\r\n| where substring(BackendFabric, 0, 3) in ($datacenter)\r\n| where BackendFabric in~ ($cluster)\r\n| project DeviceName, SwitchDownCount, BackendFabric, Generation, OSVersion\r\n| sort by SwitchDownCount desc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Infinband Switch Down",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "valueLabel": "InstanceId"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "BackendFabric": 1,
              "DeviceName": 0,
              "Generation": 2,
              "OSVersion": 3,
              "SwitchDownCount": 4
            },
            "renameByName": {
              "AvgUtilization": "Avg SM Utilization",
              "Cluster": "Cluster",
              "NodeId": "Node Id",
              "timestamp": "Timestamp"
            }
          }
        }
      ],
      "type": "table"
    }
  ],
  "preload": false,
  "refresh": "",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "All",
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-azure-data-explorer-datasource",
          "uid": "fem88lm00ugowb"
        },
        "definition": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| distinct Region\r\n| order by Region asc",
        "includeAll": true,
        "label": "region",
        "multi": true,
        "name": "region",
        "options": [],
        "query": {
          "OpenAI": false,
          "azureLogAnalytics": {
            "query": "",
            "resources": []
          },
          "clusterUri": "",
          "database": "blobstreamingdb",
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| distinct Region\r\n| order by Region asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table",
          "subscription": "E3786699-5116-4DC9-82C6-A8AAB043FB85"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": [
            "DSM"
          ],
          "value": [
            "DSM"
          ]
        },
        "datasource": {
          "type": "grafana-azure-data-explorer-datasource",
          "uid": "fem88lm00ugowb"
        },
        "definition": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in ($region)\r\n| extend DC = substring(Tenant, 0, 3)\r\n| distinct DC\r\n| order by DC asc\r\n",
        "includeAll": true,
        "label": "datacenter",
        "multi": true,
        "name": "datacenter",
        "options": [],
        "query": {
          "OpenAI": false,
          "azureLogAnalytics": {
            "query": "",
            "resources": []
          },
          "clusterUri": "",
          "database": "blobstreamingdb",
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in ($region)\r\n| extend DC = substring(Tenant, 0, 3)\r\n| distinct DC\r\n| order by DC asc\r\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table",
          "subscription": "E3786699-5116-4DC9-82C6-A8AAB043FB85"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": [
            "DSM12PrdGPC05"
          ],
          "value": [
            "DSM12PrdGPC05"
          ]
        },
        "datasource": {
          "type": "grafana-azure-data-explorer-datasource",
          "uid": "fem88lm00ugowb"
        },
        "definition": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in ($region)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| distinct Tenant\r\n| order by Tenant asc\r\n",
        "includeAll": true,
        "label": "cluster",
        "multi": true,
        "name": "cluster",
        "options": [],
        "query": {
          "OpenAI": false,
          "azureLogAnalytics": {
            "query": "",
            "resources": []
          },
          "clusterUri": "",
          "database": "blobstreamingdb",
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in ($region)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| distinct Tenant\r\n| order by Tenant asc\r\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table",
          "subscription": "E3786699-5116-4DC9-82C6-A8AAB043FB85"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "All",
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-azure-data-explorer-datasource",
          "uid": "fem88lm00ugowb"
        },
        "definition": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in~ ($region)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| distinct Customer\r\n| order by Customer asc\r\n",
        "includeAll": true,
        "label": "customer",
        "multi": true,
        "name": "customer",
        "options": [],
        "query": {
          "OpenAI": false,
          "azureLogAnalytics": {
            "query": "",
            "resources": []
          },
          "clusterUri": "",
          "database": "blobstreamingdb",
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in~ ($region)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| distinct Customer\r\n| order by Customer asc\r\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table",
          "subscription": "E3786699-5116-4DC9-82C6-A8AAB043FB85"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "All",
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-azure-data-explorer-datasource",
          "uid": "fem88lm00ugowb"
        },
        "definition": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in~ ($region)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| where Customer in~ ($customer)\r\n| distinct Platform\r\n| order by Platform asc\r\n",
        "includeAll": true,
        "label": "platform",
        "multi": true,
        "name": "platform",
        "options": [],
        "query": {
          "OpenAI": false,
          "azureLogAnalytics": {
            "query": "",
            "resources": []
          },
          "clusterUri": "",
          "database": "blobstreamingdb",
          "expression": {
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "5.1.1",
          "query": "cluster('vmakpi').database('AzureHPCAnalytics').AzureHPC_CapacityBucketDashboard_Snapshot\r\n| where Region in~ ($region)\r\n| where substring(Tenant, 0, 3) in ($datacenter)\r\n| where Tenant in~ ($cluster)\r\n| where Customer in~ ($customer)\r\n| distinct Platform\r\n| order by Platform asc\r\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table",
          "subscription": "E3786699-5116-4DC9-82C6-A8AAB043FB85"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "20",
          "value": "20"
        },
        "name": "top_n_faults",
        "options": [
          {
            "selected": false,
            "text": "3",
            "value": "3"
          },
          {
            "selected": false,
            "text": "5",
            "value": "5"
          },
          {
            "selected": false,
            "text": "10",
            "value": "10"
          },
          {
            "selected": false,
            "text": "15",
            "value": "15"
          },
          {
            "selected": true,
            "text": "20",
            "value": "20"
          }
        ],
        "query": "3,5,10,15,20",
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Cluster View",
  "uid": "cemixfipo7hfkacluster",
  "version": 84
}